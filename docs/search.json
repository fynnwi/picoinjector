[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/comsol.html","id":"parametric-sweep-over-radius","dir":"Articles","previous_headings":"","what":"Parametric sweep over radius:","title":"COMSOL Simulations","text":"Calculate deviations  Q = P/R R = Correspondingly, hydraulic resistance channel configurations can computed flowrate pressure. \\[Q = \\frac{\\Delta p}{R_h} \\iff R_h = \\frac{\\Delta p}{Q}\\]","code":"d <- readr::read_table(\"data/comsol/03_tubing_radius_sweep.txt\", skip = 1, col_names = c(\"radius\", \"q_numeric\")) %>%    dplyr::mutate(\"q_hagen_poisseuille\" = q_hagen_poisseuille(10000, radius*1e-3, 0.1, mu)) #>  #> ── Column specification ──────────────────────────────────────────────────────── #> cols( #>   radius = col_double(), #>   q_numeric = col_double() #> ) d %>%    tidyr::pivot_longer(c(q_hagen_poisseuille, q_numeric), names_to = \"approach\", values_to = \"flowrate\") %>%    ggplot(aes(x = radius, y = flowrate*1e6, color = approach)) +    geom_line() +    geom_point() +    scale_color_discrete(labels = c(\"Hagen-Poisseuille\", \"Simulation\")) +    theme_pretty_thesis() +    labs(y = \"Flow rate [ml/s]\",        x = \"Channel radius [mm]\",        color = \"Method\") d %>%    dplyr::mutate(\"relative_difference\" = (q_numeric - q_hagen_poisseuille) / q_hagen_poisseuille * 100) #> # A tibble: 18 × 4 #>    radius    q_numeric q_hagen_poisseuille relative_difference #>     <dbl>        <dbl>               <dbl>               <dbl> #>  1   0.15 0.0000000197        0.0000000223               -11.8 #>  2   0.2  0.0000000623        0.0000000706               -11.8 #>  3   0.25 0.000000152         0.000000172                -11.8 #>  4   0.3  0.000000315         0.000000357                -11.8 #>  5   0.35 0.000000584         0.000000662                -11.8 #>  6   0.4  0.000000996         0.00000113                 -11.8 #>  7   0.45 0.00000160          0.00000181                 -11.8 #>  8   0.5  0.00000243          0.00000276                 -11.7 #>  9   0.55 0.00000357          0.00000404                 -11.6 #> 10   0.6  0.00000506          0.00000572                 -11.5 #> 11   0.65 0.00000698          0.00000788                 -11.4 #> 12   0.7  0.00000939          0.0000106                  -11.3 #> 13   0.75 0.0000124           0.0000140                  -11.2 #> 14   0.8  0.0000161           0.0000181                  -11.0 #> 15   0.85 0.0000205           0.0000230                  -10.9 #> 16   0.9  0.0000258           0.0000289                  -10.8 #> 17   0.95 0.0000321           0.0000359                  -10.6 #> 18   1    0.0000395           0.0000441                  -10.5 deltaP <- 10000 # Pa  d <- readr::read_table(\"data/comsol/04_tubing_radius_sweep_smaller.txt\", skip = 1, col_names = c(\"radius\", \"q_numeric\")) %>%    dplyr::mutate(\"q_hagen_poisseuille\" = q_hagen_poisseuille(deltaP, radius*1e-3, 0.1, mu)) #>  #> ── Column specification ──────────────────────────────────────────────────────── #> cols( #>   radius = col_double(), #>   q_numeric = col_double() #> ) d %>%    tidyr::pivot_longer(c(q_hagen_poisseuille, q_numeric), names_to = \"approach\", values_to = \"flowrate\") %>%    ggplot(aes(x = radius, y = flowrate*1e6, color = approach)) +    geom_line() +    geom_point() +    scale_color_discrete(labels = c(\"Hagen-Poisseuille\", \"Simulation\")) +    theme_pretty_thesis() +    labs(y = \"Flow rate [ml/s]\",        x = \"Channel radius [mm]\",        color = \"Method\") d %>%    dplyr::mutate(\"r_numeric\" = deltaP / q_numeric,                 \"r_hagen_poisseuille\" = deltaP / q_hagen_poisseuille) #> # A tibble: 15 × 5 #>    radius    q_numeric q_hagen_poisseuille     r_numeric r_hagen_poisseuille #>     <dbl>        <dbl>               <dbl>         <dbl>               <dbl> #>  1  0.15  0.0000000197        0.0000000223 507408159123.       447677311532. #>  2  0.175 0.0000000365        0.0000000414 273987615760.       241645062784. #>  3  0.2   0.0000000623        0.0000000706 160629668300.       141647899352. #>  4  0.225 0.0000000997        0.000000113  100291849281.        88430086228. #>  5  0.25  0.000000152         0.000000172   65815453468.        58018979574. #>  6  0.275 0.000000222         0.000000252   44953922230.        39627743716. #>  7  0.3   0.000000315         0.000000357   31739986034.        27979831971. #>  8  0.325 0.000000434         0.000000492   23045191621.        20314057482. #>  9  0.35  0.000000584         0.000000662   17132088402.        15102816424. #> 10  0.375 0.000000769         0.000000873   13001872270.        11460539175. #> 11  0.4   0.000000996         0.00000113    10042076300.         8852993709. #> 12  0.425 0.00000127          0.00000144     7878978884.         6946633730. #> 13  0.45  0.00000160          0.00000181     6267234896.         5526880389. #> 14  0.475 0.00000198          0.00000225     5046427130.         4452005400. #> 15  0.5   0.00000243          0.00000276     4108632236.         3626186223."},{"path":[]},{"path":"/articles/droplet_volumes.html","id":"tubing","dir":"Articles","previous_headings":"","what":"Tubing","title":"Volumes and Concentrations","text":"Volume cylinder radius \\(r\\) height \\(h\\): \\[V = \\pi r^2 h\\] Tubing options Plot tubing volume function tubing length lengths 1 meter:  Convert flowrate unit µl/h tubing cm/h:","code":"getCylinderVolume <- function(radius, height) {   return(pi * radius^2 * height) } # everything in m radiusTygon <- 0.508e-3 / 2 radiusPTFE <- 0.8e-3 / 2 volumes <- tibble::tibble(\"length\" = seq(1,1000)) %>%    dplyr::mutate(length = length * 1e-3) %>% # convert into mm   dplyr::mutate(v_tygon = getCylinderVolume(radiusTygon, length),                 v_ptfe = getCylinderVolume(radiusPTFE, length)) %>%   tidyr::pivot_longer(c(v_tygon, v_ptfe), names_to = \"type\", values_to = \"volume\") volumes #> # A tibble: 2,000 × 3 #>    length type      volume #>     <dbl> <chr>      <dbl> #>  1  0.001 v_tygon 2.03e-10 #>  2  0.001 v_ptfe  5.03e-10 #>  3  0.002 v_tygon 4.05e-10 #>  4  0.002 v_ptfe  1.01e- 9 #>  5  0.003 v_tygon 6.08e-10 #>  6  0.003 v_ptfe  1.51e- 9 #>  7  0.004 v_tygon 8.11e-10 #>  8  0.004 v_ptfe  2.01e- 9 #>  9  0.005 v_tygon 1.01e- 9 #> 10  0.005 v_ptfe  2.51e- 9 #> # … with 1,990 more rows  ggplot(volumes, aes(x = length, y = volume * 1e9, color = type)) +    geom_line() +    scale_colour_viridis_d(labels = c(\"PTFE\", \"Tygon\")) +    labs(x = \"Tubing length [m]\",        y = \"Tubing volume [µL]\",        color = \"Tubing type\",        title = \"PTFE and Tygon tubing volume\") +    theme_pretty() flowrates <- tibble::tibble(\"ul_h\" = seq(0, 100)) %>%    dplyr::mutate(\"Tygon\" = ul_h / (getCylinderVolume(radiusTygon, 0.01) * 1e9),                  \"PTFE\" = ul_h / (getCylinderVolume(radiusPTFE, 0.01) * 1e9)) %>%    tidyr::pivot_longer(!ul_h, names_to = \"tubing_type\", values_to = \"cm_h\") ggplot(flowrates, aes(x = ul_h, y = cm_h, color = tubing_type)) +    geom_line() +    scale_color_viridis_d() +    theme_pretty() +    labs(x = \"Flowrate [ul/h]\",        y = \"Tubing-length flowrate [cm/h]\",        color = \"Tubing type\",        title = \"Flowrates in PTFE and Tygon tubing\")"},{"path":"/articles/droplet_volumes.html","id":"droplets","dir":"Articles","previous_headings":"","what":"Droplets","title":"Volumes and Concentrations","text":"much liquid contained droplet diameter \\(d\\)? Volume sphere: \\[V = \\frac{4}{3} \\pi r^3\\] Plot droplet volumes function diameter:  droplet sizes 40 µm:  many droplets x mm Tygon/PTFE tubing? Assuming close-packing equal spheres: fraction space occupied spheres \\[\\frac{\\pi}{3 \\sqrt{2}} \\approx 0.74048\\] Using packing density, can calculate volume occupied spheres given tubing length. Dividing known volume single droplet yields total number droplets contained x meters tubing, assuming close-packing equal spheres. Plot number close-packed spheres tubing length:","code":"getSphereVolume <- function(radius) {   return(4/3 * pi * radius^3) } tibble::tibble(\"diameter\" = seq(10, 100) * 1e-6) %>% # 10-200 µm droplets   dplyr::mutate(\"volume\" = getSphereVolume(diameter/2)) %>%    ggplot(aes(x = diameter*1e6, y = volume * 1e15)) + # y-axis in picoliters   geom_line() +   labs(x = \"Droplet diameter [µm]\",        y = \"Droplet volume [pL]\",        title = \"Droplet volume vs. diameter\") +    theme_pretty() last_plot() +    coord_cartesian(xlim = c(10, 40), ylim = c(0, 35)) radiusDroplet <- 15e-6 # 30 micron droplets getNumberOfClosePackedSpheres <- function(radius, volume) {   volumeSingleSphere <- 4/3 * pi * radius^3   packingDensity <- pi/3/sqrt(2)   return(packingDensity * volume / volumeSingleSphere) } volumes %>%    dplyr::mutate(n_droplets = getNumberOfClosePackedSpheres(radiusDroplet, volume)) %>%    ggplot(aes(x = length, y = n_droplets*1e-6, color = type)) +   geom_line() +   scale_colour_viridis_d(labels = c(\"PTFE\", \"Tygon\")) +    labs(x = \"Tubing length [m]\",        y = \"Number of close-packed spheres [million]\",        color = \"Tubing type\",        title = \"Number of droplets vs. tubing length\") +    theme_pretty()"},{"path":"/articles/droplet_volumes.html","id":"cells","dir":"Articles","previous_headings":"","what":"Cells","title":"Volumes and Concentrations","text":"volume cell compare droplet? Dimensions typical E.coli cell: - diameter = 1 µm - length = 2 µm - volume = 1.3 µm^3 Neglecting packing, plot many E.coli cells theoretically fit one droplet:  many mCherry molecules one bacterium, mCherry concentration droplet cell lysis? motivation question following: end, want capture droplets contained phage successfully managed kill bacteria. droplet containing intact cell causes narrow signal high magnitude excitation laser, droplet whose cells lysed result broader, low-intensity signal, since volumetric concentration fluorescent protein much smaller. However, clear, whether low signal can distinguished background noise present given time.","code":"vEcoli <- 1.3e-18 tibble::tibble(\"diameter\" = seq(10, 40) * 1e-6) %>% # 10-200 µm droplets   dplyr::mutate(\"volume\" = getSphereVolume(diameter/2),                 \"n_cells\" = volume/vEcoli) %>%    ggplot(aes(x = diameter*1e6, y = n_cells)) + # y-axis in picoliters   geom_line() +   labs(x = \"Droplet diameter [µm]\",        y = \"Number of cells equivalent to droplet volume\",        title = \"Number of E.coli cells equivalent to droplet volume vs. droplet diameter\") +    theme_pretty()"},{"path":"/articles/droplet_volumes.html","id":"poisson-statistics","dir":"Articles","previous_headings":"","what":"Poisson statistics","title":"Volumes and Concentrations","text":"(Collins et al. 2015) single-cell encapsulation: number cells can approximated Gaussian distribution case single-cell analysis cells distributed randomly aqueous phase, quantity cells per droplet determined Poisson statistics probabilistically estimate proportion single cells encapsulated according Poisson distribution, applicable case average cell arrival rate known arrival individual cells occurs independently cells Poisson distribution: \\[p(k, \\lambda) = \\frac{\\lambda^k e^{-k}}{k!}\\] \\(k\\) number particles droplet \\(\\lambda\\) average number cells per droplet volume Plot Poisson distribution different \\(\\lambda\\):","code":"tidyr::crossing(\"k\" = seq(0,10),                 \"lambda\" = c(0.05, 0.25, 0.5, 1, 5, 20)) %>%    dplyr::mutate(\"p\" = dpois(k, lambda)) %>%    ggplot(aes(x = k, y = p)) +    geom_line(aes(color = factor(lambda)), linetype = \"dashed\") +    geom_point(aes(fill = factor(lambda)), shape = 22) +    theme_pretty() +    labs(title = \"Poisson distribution for different values of lambda\",        y = \"p(k, lambda)\",        x = \"k\",        color = \"lambda\",        fill = \"lambda\")"},{"path":[]},{"path":"/articles/electrical_engineering.html","id":"voltage-amplifier-output-measurement","dir":"Articles","previous_headings":"","what":"Voltage amplifier output measurement","title":"Electrical Engineering","text":"Read data: Plot:  seems like variables frequency channel contribute significantly output voltage, therefore just fitting single line data points assuming linear dependency “output voltage ~ input voltage”.  Prepare plot can printed A5: Calculate linear regression manually: amplifier gain therefore 52x.","code":"library(picoinjector) library(readr) library(dplyr) library(ggplot2) d <- read_csv(\"data/boexle_sorter_output.csv\", show_col_types = FALSE) d #> # A tibble: 40 × 5 #>    channel frequency input_vpp output_vpp output_dc_average #>      <dbl>     <dbl>     <dbl>      <dbl>             <dbl> #>  1       2        50       2.5       130.             -0.13 #>  2       2        50       5         260.             -0.08 #>  3       2        50       7.5       389.              0.21 #>  4       2        50      10         518.              0.33 #>  5       2        50      12.5       646.              0.35 #>  6       2       500       2.5       130.             -0.22 #>  7       2       500       5         259.             -0.18 #>  8       2       500       7.5       389.              0.12 #>  9       2       500      10         518.              0.23 #> 10       2       500      12.5       646.              0.21 #> # … with 30 more rows ggplot(d, aes(x = input_vpp, y = output_vpp, color = factor(channel))) +    geom_point(shape = 23) +    geom_smooth(method = \"lm\", formula = \"y ~ x\") +    theme_pretty() p <- ggplot(d, aes(x = input_vpp, y = output_vpp)) +    geom_point(shape = 23) +    geom_smooth(method = \"lm\", formula = \"y ~ x\", fullrange = TRUE, color = \"black\", linewidth = 1) +    xlim(c(0, 12.5)) +    labs(title = '\"boexle sorter\" output voltage as function of input voltage',        x = \"Input voltage peak-to-peak\",        y = \"Output voltage peak-to-peak\") +    theme_pretty() p p +    scale_y_continuous(breaks = seq(0, 700, 100), minor_breaks = seq(0, 700, 25)) +    scale_x_continuous(breaks = seq(0, 12, 2), minor_breaks = seq(0, 13), limits = c(0, 13)) lm(output_vpp ~ input_vpp, d) #>  #> Call: #> lm(formula = output_vpp ~ input_vpp, data = d) #>  #> Coefficients: #> (Intercept)    input_vpp   #>    -0.04027     52.08425"},{"path":"/articles/fads_analysis.html","id":"tsv-file","dir":"Articles","previous_headings":"","what":"TSV file","title":"FADS Analysis","text":"Using LabVIEW software, TSV file can recorded experiment, every row corresponds droplet recognized sorter. droplet flowing across focus spot recognized, signal captured PMT exceed defined threshold terms amplitude duration. way, droplets can distinguished background signal. function allows plot red green signal:  plot, hexagonal glyphs:  Lets look signal width well:  Plot width vs. time:  Plot signal vs. time:  Plot droplet frequency time:  course project, collected many FADS tsv files. , want generate comprehensive report containing plots shown single function call. Probably best way , combining ggplot objects one plot using patchwork:  .txt files generate FADS setup:","code":"fads <- fads_read_tsv(\"data/fads/220916/pi30v4_0.txt\") fads #> # A tibble: 43,950 × 6 #>           time  blue green   red width spacing #>          <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl> #>  1 3631845945.     0 0.222 1.13   3.18    9.09 #>  2 3631846023.     0 0.218 0.943  2.62   13.3  #>  3 3631846070.     0 0.218 0.872  2.29    7.3  #>  4 3631846129.     0 0.238 0.963  2.90   10.1  #>  5 3631846181.     0 0.237 0.914  2.64    8.05 #>  6 3631846254.     0 0.234 0.935  2.85   12.7  #>  7 3631846297.     0 0.228 0.941  2.80    6.32 #>  8 3631846383.     0 0.229 0.902  2.68   15.5  #>  9 3631846415.     0 0.227 0.883  2.52    4.04 #> 10 3631846502.     0 0.227 1.10   3.30   15.8  #> # … with 43,940 more rows fads %>%    fads_remove_outliers() %>%   fads_plot_red_green() fads %>%    fads_remove_outliers() %>%   fads_plot_red_green_hex() fads %>%    # fads_remove_outliers() %>%    fads_plot_width() fads %>%    # fads_remove_outliers() %>%    fads_plot_width_time() fads %>%    fads_remove_outliers() %>%    fads_plot_signal_time() fads_plot_frequency(fads) p <- fads_generate_report(\"data/fads/220916/pi30v4_6.txt\") p fads_reports_for_all(\"~/nyancat_tsv\", \"output/fads_data_exploration/\")"},{"path":"/articles/fads_analysis.html","id":"picoinjecting-cells-experiment-2022-12-16","dir":"Articles","previous_headings":"","what":"Picoinjecting cells experiment (2022-12-16)","title":"FADS Analysis","text":"Convert droplet occupancy volume","code":"occupancy_to_picoliter <- function(occupancy, knownConcentration = 1e8) {   return(occupancy/knownConcentration*1e9) } occupancies <- readr::read_tsv(\"data/fads/221216/occupancy_redmph_0_0085.txt\", col_names = c(\"file\", \"occupancy\"), show_col_types = F) flowrates <- readr::read_tsv(\"data/fads/221216/flowrates.txt\", show_col_types = F)  flowrates %>%    dplyr::left_join(occupancies, by = \"file\") %>%    dplyr::mutate(\"volume\" = occupancy_to_picoliter(occupancy)) %>%    dplyr::filter(!file %in% paste0(\"Signal_\", 4)) %>%    ggplot(aes(x = p_water, y = p_oil)) +    # geom_text(aes(label = file), position = position_jitter(height = 4, width = 0)) +    geom_point(aes(size = volume, color = volume)) +    theme_pretty()"},{"path":"/articles/fads_analysis.html","id":"picoinjecting-atto488-into-resorufin-droplets-2022-11-17","dir":"Articles","previous_headings":"","what":"Picoinjecting Atto488 into resorufin droplets (2022-11-17)","title":"FADS Analysis","text":"Combine available data one tibble:   False droplets can distinguished width:  Another interesting observation confirms quantitative accuracy laser-based droplet analysis fact injected droplets increase size thus generate wider signal PMT, signal power, .e. area signal peak stays . Therefore, signal arriving PMT can interpreted direct measure amount dye inside droplet.  Calculate averages: Can somehow translate width volume? Yes: comparting width non-injected droplets. injected due small? Really cool: droplet width changes due picoinjection, area generated signal, emphasizing quantitative method . seems can used really measure amount dye inside droplet. (See Signal5)","code":"greenAll <- fads_read_all(\"data/fads/221117/\", \"_barcode.txt$\") redAll <- fads_read_all(\"data/fads/221117/\", \"_injected.txt$\") greenAll %>%    dplyr::filter(injected == 1,                 width < 0.001) %>%    ggplot(aes(x = width, fill = file)) +    geom_histogram(bins = 50, alpha = 0.5, position = \"identity\") +    theme_pretty_thesis() +    labs(x = \"Droplet width [ms]\",        y = \"Droplets\",        fille = \"File\") greenAll %>%    dplyr::filter(width < 0.001) %>%    ggplot(aes(x = width, fill = factor(injected))) +    geom_histogram(bins  =100, alpha = 0.5, position = \"identity\")  +   theme_pretty_thesis() +    facet_wrap(~ file) +    labs(title = \"Green droplet widths\",        x = \"Width [ms]\",        y = \"Droplets\",        fill = \"Injected\") redAll %>%    dplyr::filter(width < 0.0015) %>%    ggplot(aes(x = width, fill = factor(is_false_drop))) +    geom_histogram(bins  =100, alpha = 0.5, position = \"identity\")  +   theme_pretty_thesis() +    facet_wrap(~ file) greenAll %>%    dplyr::filter(area < 3e-5) %>%    ggplot(aes(x = area, fill = factor(injected))) +    geom_histogram(bins  =100, alpha = 0.5, position = \"identity\")  +   theme_pretty_thesis() +    facet_wrap(~ file) +    labs(title = \"Green droplets signal area\",        x = \"Signal area [V*s]\",        y = \"Number of droplets\",        fill = \"Injected\") greenAll %>%    dplyr::group_by(file) %>%    dplyr::summarise(\"width_mean\" = mean(width),                    \"width_sd\" = sd(width),                    \"area_mean\" = mean(area),                    \"area_sd\" = sd(area),                    \"injected_mean\" = mean(injected)) #> # A tibble: 9 × 6 #>   file     width_mean  width_sd  area_mean    area_sd injected_mean #>   <chr>         <dbl>     <dbl>      <dbl>      <dbl>         <dbl> #> 1 Signal_0   0.000431 0.000194  0.00000939 0.00000839        0.795  #> 2 Signal_1   0.000414 0.000171  0.0000151  0.00000990        0.0145 #> 3 Signal_2   0.000597 0.000231  0.0000128  0.00000870        0.799  #> 4 Signal_3   0.000647 0.000412  0.0000231  0.0000150         0.331  #> 5 Signal_4   0.000496 0.000181  0.0000121  0.00000613        0.511  #> 6 Signal_5   0.000383 0.000145  0.0000114  0.00000788        0.520  #> 7 Signal_6   0.000225 0.0000576 0.00000660 0.00000303        0.578  #> 8 Signal_7   0.000255 0.0000518 0.00000687 0.00000270        0.960  #> 9 Signal_8   0.000301 0.0000744 0.00000724 0.00000316        0.986 greenAll %>%    dplyr::group_by(file, injected) %>%    dplyr::summarise(\"width_mean\" = mean(width),                    \"width_sd\" = sd(width),                    \"area_mean\" = mean(area),                    \"area_sd\" = sd(area),                    \"injected_mean\" = mean(injected)) #> `summarise()` has grouped output by 'file'. You can override using the #> `.groups` argument. #> # A tibble: 18 × 7 #> # Groups:   file [9] #>    file     injected width_mean  width_sd  area_mean    area_sd injected_mean #>    <chr>       <dbl>      <dbl>     <dbl>      <dbl>      <dbl>         <dbl> #>  1 Signal_0        0   0.000431 0.000209  0.0000165  0.0000124              0 #>  2 Signal_0        1   0.000431 0.000190  0.00000756 0.00000569             1 #>  3 Signal_1        0   0.000407 0.000150  0.0000148  0.00000886             0 #>  4 Signal_1        1   0.000880 0.000517  0.0000402  0.0000282              1 #>  5 Signal_2        0   0.000493 0.000273  0.0000153  0.0000119              0 #>  6 Signal_2        1   0.000623 0.000211  0.0000122  0.00000755             1 #>  7 Signal_3        0   0.000428 0.000158  0.0000179  0.0000103              0 #>  8 Signal_3        1   0.00109  0.000412  0.0000334  0.0000174              1 #>  9 Signal_4        0   0.000380 0.000129  0.0000114  0.00000610             0 #> 10 Signal_4        1   0.000607 0.000153  0.0000127  0.00000608             1 #> 11 Signal_5        0   0.000367 0.000175  0.0000120  0.00000937             0 #> 12 Signal_5        1   0.000398 0.000108  0.0000110  0.00000615             1 #> 13 Signal_6        0   0.000213 0.0000665 0.00000658 0.00000339             0 #> 14 Signal_6        1   0.000234 0.0000481 0.00000661 0.00000274             1 #> 15 Signal_7        0   0.000229 0.0000754 0.00000698 0.00000366             0 #> 16 Signal_7        1   0.000257 0.0000503 0.00000686 0.00000265             1 #> 17 Signal_8        0   0.000256 0.0000657 0.00000610 0.00000233             0 #> 18 Signal_8        1   0.000301 0.0000744 0.00000725 0.00000317             1"},{"path":"/articles/fads_picoinjector_characterization.html","id":"picoinjecting-black-ink-and-recording-videos-at-4000-fps","dir":"Articles","previous_headings":"","what":"Picoinjecting black ink and recording videos at 4000 fps","title":"FADS-based Picoinjector Characterization","text":"Black ink injected ~ 30 µm droplets videos recorded using high-speed camera. footage processed using ImageJ MATLAB order detect droplets determine size. sizes recognized droplets stored text files. Read data: Now, plot measured droplet sizes check make sense:","code":"files <- list.files(\"data/fads/221216/ink/\", pattern = \"_kymograph_droplets.txt$\", full.names = TRUE) droplets <- tibble::tibble() for (f in files) {   droplets <- droplets %>%      dplyr::bind_rows(       readr::read_table(f, show_col_types = FALSE) %>%          dplyr::mutate(\"file\" = stringr::str_extract(basename(f), \"\\\\d{8}_\\\\d{6}\")) %>%          # normalize intensity by droplet width         dplyr::mutate(\"intensity\" = intensity/width)     ) }  # add metadata droplets <- droplets %>%    dplyr::left_join(     readr::read_table(\"data/fads/221216/ink/metadata.txt\", show_col_types = FALSE),     by = \"file\"   ) droplets %>%    filter(ac_field == TRUE) %>%    mutate(\"q_emulsion\" = as.factor(q_emulsion),          \"p_oil\" = as.factor(p_oil),          \"p_water\" = as.factor(p_water)) %>%    ggplot(aes(x = width)) +    geom_histogram(aes(fill = p_water), alpha = 0.3, position = \"identity\") +    facet_grid(p_oil ~ q_emulsion, labeller = label_both, scales = \"free\") +    theme_pretty_thesis() #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`."},{"path":"/articles/fads_picoinjector_characterization.html","id":"single-file-level","dir":"Articles","previous_headings":"Picoinjecting black ink and recording videos at 4000 fps","what":"Single-file level","title":"FADS-based Picoinjector Characterization","text":"Summarize droplet populations every file: median diameter uninjected droplets 30 µm. Since pressure flow rate related linearly Hagen-Poisseuille model, summarize two variables single ratio p_oil/q_emulsion somehow want express droplet velocity terms p_oil q_emulsion. q_emulsion straightforward, spacing oil driven pressure, makes flow rate harder estimate. just use Hagen-Poisseuille law hydraulic resistance value literature convert pressure flow rate, add emulsion flow rate. \\[R_h =\\frac{12 \\eta L}{1-0.63(h/w)} \\frac{1}{h^3w}\\] dynamic viscosity use FC-40 fluorinert oil according source 4.1 mPa s. channel dimensions use L = 0.5 mm, h = 30 µm, w = 20 µm (approximate length confined channel segment) Idea: emulsion flow rate negligible compared spacing oil flow rate, usually least five times larger. Therefore, express p_oil p_injection ratio:  Lets investigate grey intensities.  Information can take plot: larger injection volume, ink injected, pixel intensity decreases high variability","code":"dropletSummary <- droplets %>%    dplyr::group_by(file, p_oil, q_emulsion, p_water, ac_field) %>%    dplyr::summarise(\"mean_diameter\" = mean(width),                    \"median_diameter\" = median(width),                    \"sd_diameter\" = sd(width),                    \"intensity_mean\" = mean(intensity),                    \"intensity_median\" = median(intensity),                    \"intensity_sd\" = sd(intensity),                    \"n_droplets\" = dplyr::n()) #> `summarise()` has grouped output by 'file', 'p_oil', 'q_emulsion', 'p_water'. #> You can override using the `.groups` argument. dropletSummary #> # A tibble: 14 × 12 #> # Groups:   file, p_oil, q_emulsion, p_water [14] #>    file    p_oil q_emu…¹ p_water ac_fi…² mean_…³ media…⁴ sd_di…⁵ inten…⁶ inten…⁷ #>    <chr>   <dbl>   <dbl>   <dbl> <lgl>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1 202212…   260      35     131 FALSE      31.2    30      5.27    327.    331. #>  2 202212…    80      15      60 TRUE       33.8    33.5    1.73    128.    129. #>  3 202212…   115      15      60 TRUE       32.0    32.2    2.12    131.    136. #>  4 202212…   115      15      70 TRUE       34.8    34.8    1.76    126.    129. #>  5 202212…   115      15      80 TRUE       37.8    37.8    1.70    114.    115. #>  6 202212…   130      15      80 TRUE       36.0    36.1    1.80    106.    107. #>  7 202212…   130      25      80 TRUE       34.7    35.2    2.43    130.    130. #>  8 202212…   145      25      80 TRUE       33.3    33.5    3.71    160.    154. #>  9 202212…   145      25      70 TRUE       31.0    31.7    2.72    197.    187. #> 10 202212…   145      25      70 TRUE       32.1    31.7    5.06    246.    234. #> 11 202212…   145      35      70 TRUE       33.8    33.9    2.84    135.    134. #> 12 202212…   160      35      70 TRUE       32.6    33.5    3.00    145.    137. #> 13 202212…   160      35      70 TRUE       31.5    32.2    3.12    134.    126. #> 14 202212…   160      35      70 TRUE       30.9    30.9    3.71    139.    135. #> # … with 2 more variables: intensity_sd <dbl>, n_droplets <int>, and #> #   abbreviated variable names ¹​q_emulsion, ²​ac_field, ³​mean_diameter, #> #   ⁴​median_diameter, ⁵​sd_diameter, ⁶​intensity_mean, ⁷​intensity_median r_h <-  12 * 4.1e-3 * 0.5e-3 /((1-0.63*(30e-6 / 20e-6))*(30e-6)^3 * 20e-6) dropletSummary <- dropletSummary %>%    dplyr::mutate(\"q_oil_est\" = p_oil * 1e2/r_h * 3.6e12) # in ml/h get_volume_change <- function(diameter1, diameter0) {   return(1/6 * pi * (diameter1^3 - diameter0^3)) } pal <- wes_palette(\"Zissou1\", 100, type = \"continuous\") dropletSummary %>%    filter(ac_field == TRUE) %>%    mutate(\"water_oil_ratio\" = p_water/p_oil,          \"injected_volume\" = sapply(median_diameter * 1e-6, get_volume_change, 30e-6) * 1e15) %>%    ggplot(aes(x = water_oil_ratio, y = injected_volume)) +    scale_fill_gradientn(colours = pal) +    geom_smooth(method = \"lm\", formula = y~x, linetype = \"dashed\", color = \"black\", linewidth = 0.5, se = FALSE) +     # geom_hline(yintercept = 30, linetype = \"dashed\") +    geom_point(aes(fill = q_emulsion), shape = 21, size = 4) +    theme_pretty_thesis() +    labs(x = expression(p[\"injection\"]/p[\"oil\"]),        y = \"Injected volume [pL]\",        fill = \"Emulsion flow rate [µl/h]\",        title = \"Picoinjected volumes are largest at low throughput and relatively high injection pressure\") +    ylim(c(0,15)) +    guides(fill = guide_legend(title.position = \"top\", direction = \"horizontal\")) dropletSummary %>%    filter(ac_field == TRUE) %>%    mutate(\"water_oil_ratio\" = p_water/p_oil,          \"injected_volume\" = sapply(median_diameter * 1e-6, get_volume_change, 30e-6) * 1e15) %>%    ggplot(aes(x = injected_volume, y = intensity_median)) +    geom_smooth(method = \"lm\", formula = y~x, linetype = \"dashed\", color = \"black\", linewidth = 0.5, se = FALSE) +     # geom_hline(yintercept = 30, linetype = \"dashed\") +    geom_point(aes(fill = water_oil_ratio), shape = 21, size = 4) +    # scale_fill_viridis_c() +   scale_fill_gradientn(colours = pal) +   theme_pretty_thesis() +    labs(x = \"Injected volume [pL]\",        y = \"Median droplet gray value\",        title = \"Pixel intensity decreases when picoinjecting ink\",        fill = expression(p[\"injection\"]/p[\"oil\"])) +    theme(legend.position = c(1,1),         legend.justification = c(1,1)) # guides(fill =    #          guide_legend(title.position = \"top\", direction= \"horizontal\", )) # library(ggridges) #  # droplets %>%  #   group_by(file) %>% #   filter(width > quantile(width, 0.1) & width < quantile(width, 0.9)) %>% # remove outliers #   ungroup() %>%  #   ggplot(aes(x = width, y = file)) +  #   scale_fill_gradientn(colours = pal) + #   geom_vline(xintercept = 30) +  #   geom_density_ridges(aes(fill = p_water/p_oil)) +  #   theme_pretty_thesis() + facet_wrap(~factor(q_emulsion), ncol = 1)"},{"path":"/articles/fads_picoinjector_characterization.html","id":"picoinjecting-atto488-into-resorufin-droplets-2023-01-26","dir":"Articles","previous_headings":"","what":"Picoinjecting Atto488 into resorufin droplets (2023-01-26)","title":"FADS-based Picoinjector Characterization","text":"order characterize picoinjector operating range, 30 µm resorufin droplets injected Att488 dye. Fluorescence activities droplets measured operation using FADS-setup. Waveform files corresponding signals arriving two PMT tubes recorded analyzed using MATLAB code, TSV files containing information droplets identified signal generated. analysed vignette.","code":""},{"path":"/articles/fads_picoinjector_characterization.html","id":"single-droplet-level","dir":"Articles","previous_headings":"Picoinjecting Atto488 into resorufin droplets (2023-01-26)","what":"Single-droplet level","title":"FADS-based Picoinjector Characterization","text":"Load TSV data. row corresponds droplet. Droplet populations resulting 34 different parameter combinations collected. exclude file Signal_29 picoinjection didn’t work well parameters. information times AC field /, well pressures flow rates stored metadata text file: Convert generator signal voltage amplified peak--peak voltage applied electrodes. use linear regression fit calculated vignette(\"electrical_engineering\"). Using information flow rates well channel dimensions, can furthermore estimate droplet velocity droplets pass injection junction simply dividing total flow rate (.e. emulsion + spacing oil) known microchannel cross section. account different units use 1 µl = 1e9 µm³. Now want join metadata signal data. Furthermore, knowing droplet velocity, can go transform signal width, period time, actual spatial width units length. end, multiply peak width droplet velocity get spatial length droplet. Obviously, numbers large represent droplet diameters. One must account fact droplets still squeezed microchannel, appear therefore much longer. can convert measured squeezed squeezed length equivalent spherical droplet diameter: confined picoinjection junction, 30µm droplets squeezed elongated shape can approximated elliptical cylinder half-ellipsoids end. volume ellipsoid semi-axes \\(, b, c\\) \\[V_e = \\frac{4}{3} \\pi b c.\\] volume elliptical cylinder semi-axes \\(, b\\) length \\(L\\) computes \\[V_c = \\pi b L.\\] droplet volume can approximated \\(V_d = V_e + V_c\\): \\[V_d = V_e + V_c = \\frac{4}{3} \\pi b c + \\pi b L.\\] Lets say \\(c\\) ellipsoid radius along axis direction channel, \\(\\) radius lateral direction (.e. half channel width), \\(b\\) radius z-direction (.e. half channel height). signal measured PMT corresponds full length droplet \\(L+2c\\). Assuming \\(c = \\frac{1}{2}(+b)\\) rearranging \\(V_d\\) yields: \\[V_d = \\pi b \\left( \\frac{2}{3} (+b) + L \\right).\\] radius droplet perfectly spherical shape can found \\[r = \\left(\\frac{3}{4} \\frac{V_d}{\\pi}\\right)^{1/3}.\\]  calculated widths/diameters represent flow rate normalization, therefore, uninjected (.e. field ) droplet populations now width_um value, regardless flow rate. , measurement artifacts become important scaling flow rates. Interesting: recording signals 0-4, re-adjust laser focus due chip movement. recordings seem cluster apart measurements. Also: measurement approach becomes inaccurate peak widths approach resolution limit (see Signal33). Reasons droplets appearing larger actual mesured like : laser spot ideal point spatial extent, therefore PMTs receive signal also, droplet partially peak widths measured beginning rising edge end falling edge","code":"greenAll <- fads_read_all(\"data/fads/230126/\", \"_barcode.txt$\") %>%    dplyr::filter(file != \"Signal_29\")  redAll <- fads_read_all(\"data/fads/230126/\", \"_injected.txt$\") %>%    dplyr::filter(file != \"Signal_29\")  greenAll #> # A tibble: 2,651,225 × 11 #>    t_start   t_max   t_end voltage   width spacing    area injec…¹    id occup…² #>      <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> <dbl>   <dbl> #>  1 0.00288 0.00361 0.00422 0.00600 0.00133 0.00314 5.82e-6       0     1       0 #>  2 0.00736 0.00816 0.00926 0.0108  0.0019  0.00218 1.22e-5       1     2       1 #>  3 0.0114  0.0122  0.0128  0.00634 0.00133 0.00192 6.21e-6       0     3       0 #>  4 0.0147  0.0154  0.0160  0.00652 0.00132 0.00140 6.23e-6       0     4       0 #>  5 0.0174  0.0182  0.0187  0.00701 0.00127 0.00164 6.25e-6       1     5       1 #>  6 0.0203  0.0210  0.0216  0.00674 0.00130 0.0014  6.27e-6       1     6       1 #>  7 0.0230  0.0238  0.0244  0.00680 0.00132 0.00194 6.48e-6       1     7       1 #>  8 0.0263  0.0270  0.0276  0.00662 0.00128 0.00140 6.09e-6       1     8       1 #>  9 0.0290  0.0297  0.0302  0.00704 0.00123 0.00203 6.21e-6       1     9       1 #> 10 0.0322  0.0329  0.0335  0.00631 0.00128 0.00154 5.68e-6       1    10       1 #> # … with 2,651,215 more rows, 1 more variable: file <chr>, and abbreviated #> #   variable names ¹​injected, ²​occupancy metadata <- readr::read_table(\"data/fads/230126/metadata.txt\", show_col_types = FALSE) metadata #> # A tibble: 34 × 9 #>    file     q_oil p_water q_emulsion ac_v_pp ac_frequency t_off video    laser…¹ #>    <chr>    <dbl>   <dbl>      <dbl>   <dbl>        <dbl> <dbl> <chr>      <dbl> #>  1 Signal_0   150     125         25       5           50 103.  2023012…       1 #>  2 Signal_1   150     115         25       5           50  95.3 2023012…       1 #>  3 Signal_2   150     105         25       5           50  85.9 2023012…       1 #>  4 Signal_3   150      95         25       5           50 112.  2023012…       1 #>  5 Signal_4   150      85         25       5           50  99.4 2023012…       1 #>  6 Signal_5   150     130         25       5           50  91.9 2023012…       2 #>  7 Signal_6   150     140         25       5           50  65.2 2023012…       2 #>  8 Signal_7   300     120         50       5           50  42.4 2023012…       2 #>  9 Signal_8   300     130         50       5           50  51.2 2023012…       2 #> 10 Signal_9   300     140         50       5           50  27.3 2023012…       2 #> # … with 24 more rows, and abbreviated variable name ¹​laser_focus metadata <- metadata %>%    dplyr::mutate(\"ac_v_pp\" = ac_v_pp * 52.08425) %>%    # also remove the 'video' column   dplyr::select(-video) metadata <- metadata %>%    dplyr::mutate(\"velocity\" = ((q_emulsion+q_oil) * 1e9/3600)/(20*30)*1e-6) # m/s grn <- greenAll %>%    left_join(metadata, by = \"file\") %>%    dplyr::mutate(\"ac_field\" = case_when(t_max < t_off ~ TRUE,                                              .default = FALSE)) red <- redAll %>%    left_join(metadata, by = \"file\") %>%    dplyr::mutate(\"ac_field\" = case_when(t_max < t_off ~ TRUE,                                              .default = FALSE)) grn <- grn %>%    dplyr::mutate(\"width_um\" = width * velocity * 1e6) red <- red %>%    dplyr::mutate(\"width_um\" = width * velocity * 1e6) grn %>%    dplyr::select(file, q_emulsion, q_oil, p_water, ac_field, width , width_um) #> # A tibble: 2,651,225 × 7 #>    file     q_emulsion q_oil p_water ac_field   width width_um #>    <chr>         <dbl> <dbl>   <dbl> <lgl>      <dbl>    <dbl> #>  1 Signal_0         25   150     125 TRUE     0.00133    108.  #>  2 Signal_0         25   150     125 TRUE     0.0019     154.  #>  3 Signal_0         25   150     125 TRUE     0.00133    108.  #>  4 Signal_0         25   150     125 TRUE     0.00132    107.  #>  5 Signal_0         25   150     125 TRUE     0.00127    103.  #>  6 Signal_0         25   150     125 TRUE     0.00130    105.  #>  7 Signal_0         25   150     125 TRUE     0.00132    107.  #>  8 Signal_0         25   150     125 TRUE     0.00128    103.  #>  9 Signal_0         25   150     125 TRUE     0.00123     99.7 #> 10 Signal_0         25   150     125 TRUE     0.00128    104.  #> # … with 2,651,215 more rows squeezed_length_to_diameter <- function(signalWidth, channelWidth, channelHeight) {   # if the droplet is not squeezed, l is already the diamteer of a spheere   a <- channelWidth/2   b <- channelHeight/2   if (signalWidth < a+b) {     return(signalWidth)   }   # else...   # get volume of the corresponding half sphere-cylinder   vSphere = pi * a * b * (2/3*(a+b) + signalWidth-a-b)   # return diameter of a same-volume sphere   return(2*(3/4 * vSphere/pi)^(1/3)) }  # inverse function... diameter_to_squeezed_length <- function(diameter, channelWidth, channelHeight) {   # if the droplet is not squeezed, l is already the diameter of a spheere   a <- channelWidth/2   b <- channelHeight/2   if (diameter < a+b) {     return(diameter)   }   # else...   # get volume of the corresponding half sphere-cylinder   vsphere = 4/3 * pi *(diameter/2)^3   signalWidth <- vsphere/(pi*a*b) + 1/3 * (a+b)   return(signalWidth) } tibble::tibble(\"signal\" = seq(10,100)) %>%    dplyr::mutate(\"diameter\" = sapply(signal, squeezed_length_to_diameter, 20, 30)) %>%    ggplot(aes(x = signal, y = diameter)) +    geom_line() +    theme_pretty() +   labs(title = \"Droplet diameter as function of PMT signal spatial width. For unsqueezed droplets, the signal is equal to the diameter.\",        x = \"PMT signal width converted into [µm]\",        y = \"Corresponding sphere diameter [µm]\") tibble::tibble(\"diameter\" = seq(10,45)) %>%    dplyr::mutate(\"length\" = sapply(diameter, diameter_to_squeezed_length, 20, 30)) %>%    ggplot(aes(x = length, y = diameter)) +    geom_line() +    theme_pretty() +   labs(title = \"Droplet diameter as function of PMT signal spatial width. For unsqueezed droplets, the signal is equal to the diameter.\",        x = \"PMT signal width converted into [µm]\",        y = \"Corresponding sphere diameter [µm]\") grn %>%    filter(ac_field == FALSE) %>%   group_by(file, ac_field) %>%    summarise(median_width = median(width_um)) %>%    mutate(\"corresponding_sphere_diameter\" = sapply(median_width, squeezed_length_to_diameter, 20, 30)) %>%    arrange(median_width) #> `summarise()` has grouped output by 'file'. You can override using the #> `.groups` argument. #> # A tibble: 33 × 4 #> # Groups:   file [33] #>    file      ac_field median_width corresponding_sphere_diameter #>    <chr>     <lgl>           <dbl>                         <dbl> #>  1 Signal_4  FALSE            55.1                          34.8 #>  2 Signal_3  FALSE            60.4                          36.0 #>  3 Signal_2  FALSE            62.8                          36.6 #>  4 Signal_1  FALSE            65.6                          37.2 #>  5 Signal_0  FALSE            67.2                          37.6 #>  6 Signal_24 FALSE            68.3                          37.8 #>  7 Signal_6  FALSE            70.1                          38.2 #>  8 Signal_26 FALSE            70.5                          38.3 #>  9 Signal_21 FALSE            70.6                          38.3 #> 10 Signal_20 FALSE            71.8                          38.5 #> # … with 23 more rows"},{"path":"/articles/fads_picoinjector_characterization.html","id":"file-electric-field-state-level","dir":"Articles","previous_headings":"Picoinjecting Atto488 into resorufin droplets (2023-01-26)","what":"(file, electric field state)-level","title":"FADS-based Picoinjector Characterization","text":"Summarize groups: Plot droplet frequency (derived number droplets detected signal) vs. emulsion flow rate.  expected, can seen droplet frequency depends linearly emulsion flow rate. Therefore, can use second axis plotting emulsion flow rate. find: frequency [Hz] = q_emulsion [µl/h] * 12.05 + 21.72. neglect offset. Next, can determine mean median droplet diameter non-injected populations (.e. AC field ) use measure volume increase, .e. injected volume. droplet population level, individual droplets. Plot Q_emulsion (~droplet frequency) vs. p_injection relate peak width droplet dimensions measuring droplet sizes high-speed video uninjected droplets. Percentage false droplets  Percentage injected droplets:","code":"grnSummary <- grn %>%    dplyr::group_by(file, ac_field) %>%    dplyr::summarise(\"width_mean\" = mean(width),                    \"width_sd\" = sd(width),                    \"width_median\" = median(width),                    \"voltage_mean\" = mean(voltage),                    \"voltage_sd\" = sd(voltage),                    \"voltage_median\" = median(voltage),                    \"area_mean\" = mean(area),                    \"area_sd\" = sd(area),                    \"area_median\" = median(area),                    \"spacing_mean\" = mean(spacing),                    \"spacing_sd\" = sd(spacing),                    \"spacing_median\" = median(spacing),                    \"frequency\" = dplyr::n() / (max(t_max) - min(t_max)),                    \"injected\" = mean(injected),                    \"n_droplets\" = dplyr::n(),                    .groups = \"drop\") %>%    dplyr::left_join(metadata, by = \"file\") %>%    dplyr::mutate(\"velocity\" = ((q_emulsion+q_oil) * 1e9/3600)/(20*30)*1e-6) # m/s redSummary <- red %>%    dplyr::group_by(file, ac_field) %>%    dplyr::summarise(\"width_mean\" = mean(width),                    \"width_sd\" = sd(width),                    \"width_median\" = median(width),                    \"voltage_mean\" = mean(voltage),                    \"voltage_sd\" = sd(voltage),                    \"voltage_median\" = median(voltage),                    \"area_mean\" = mean(area),                    \"area_sd\" = sd(area),                    \"area_median\" = median(area),                    \"spacing_mean\" = mean(spacing),                    \"spacing_sd\" = sd(spacing),                    \"spacing_median\" = median(spacing),                    \"frequency\" = dplyr::n() / (max(t_max) - min(t_max)),                    \"is_false_droplet\" = mean(is_false_drop),                     \"n_droplets\" = dplyr::n(),                    .groups = \"drop\") %>%    dplyr::left_join(metadata, by = \"file\") %>%    dplyr::mutate(\"velocity\" = ((q_emulsion+q_oil) * 1e9/3600)/(20*30)*1e-6) # m/s grnSummary %>%    ggplot(aes(q_emulsion, y = frequency)) +    geom_smooth(method = \"lm\", formula = y~x) +    geom_point(shape = 1) +    theme_pretty_thesis() # get linear regression m <- lm(frequency ~ q_emulsion, grnSummary) m #>  #> Call: #> lm(formula = frequency ~ q_emulsion, data = grnSummary) #>  #> Coefficients: #> (Intercept)   q_emulsion   #>       21.72        12.05 grnSummary %>%    dplyr::mutate(\"width_um\" = width_mean * velocity * 1e6) %>%    dplyr::select(file, q_emulsion, q_oil, p_water, ac_field, width_mean, width_um) %>%    dplyr::mutate(\"width_um\" = sapply(width_um, squeezed_length_to_diameter, 20, 30)) #> # A tibble: 66 × 7 #>    file      q_emulsion q_oil p_water ac_field width_mean width_um #>    <chr>          <dbl> <dbl>   <dbl> <lgl>         <dbl>    <dbl> #>  1 Signal_0          25   150     125 FALSE      0.000839     37.7 #>  2 Signal_0          25   150     125 TRUE       0.00120      43.1 #>  3 Signal_1          25   150     115 FALSE      0.000830     37.6 #>  4 Signal_1          25   150     115 TRUE       0.00112      42.0 #>  5 Signal_10         50   300     150 FALSE      0.000483     39.8 #>  6 Signal_10         50   300     150 TRUE       0.000612     43.4 #>  7 Signal_11         50   300     160 FALSE      0.000484     39.8 #>  8 Signal_11         50   300     160 TRUE       0.000601     43.1 #>  9 Signal_12         50   300     170 FALSE      0.000472     39.4 #> 10 Signal_12         50   300     170 TRUE       0.000607     43.3 #> # … with 56 more rows redSummary %>%    ggplot(aes(x = is_false_droplet)) +    geom_histogram(aes(fill = ac_field), alpha = 0.5, position = \"identity\", bins = 30) +    theme_pretty_thesis() +    labs(x = \"Percentage of false droplets\",        y = \"Count\", fill = \"Electric field on\") +    theme(legend.position = c(1,1), legend.justification = c(1,1)) grnSummary %>%    ggplot(aes(x = injected)) +    geom_histogram(aes(fill = ac_field), alpha = 0.5, position = \"identity\", bins = 30) +    theme_pretty_thesis() +    labs(x = \"Percentage of injected droplets\",        y = \"Count\", fill = \"Electric field on\") +    theme(legend.position = c(1,1), legend.justification = c(1,1)) grnSummary %>%    # filter(q_emulsion != 300) %>%    ggplot(aes(x = velocity, y = p_water, color = injected, shape = ac_field)) +    geom_point(size = 2, position = position_dodge2(width = 0.01)) +    scale_colour_viridis_c() +    # scale_color_gradientn(colours = pal) +    theme_pretty_thesis()"},{"path":"/articles/fads_picoinjector_characterization.html","id":"single-file-level-1","dir":"Articles","previous_headings":"Picoinjecting Atto488 into resorufin droplets (2023-01-26)","what":"Single-file level","title":"FADS-based Picoinjector Characterization","text":"Consolidate electric field channel single rows: false_drops = percentage false drops field false_injections = percentage injected drops field leakage = percentage false drops field delta_width = median width field minus field Derive metrics data:","code":"# extract the base information from grnSummary drops <- grnSummary %>%    dplyr::filter(ac_field == TRUE) %>%    dplyr::select(c(file, q_oil, q_emulsion, p_water, velocity, frequency, ac_v_pp, ac_frequency)) %>%    dplyr::left_join(      # get information about INJECTED droplets, i.e. channel == green and injected > 0 (and probably field == off for most cases) grn %>%    dplyr::filter(injected == 1) %>%    dplyr::group_by(file) %>%    dplyr::summarise(\"width_green_injected\" = median(width),                    \"voltage_green_injected\" = median(voltage),                    \"area_green_injected\" = median(area),                    .groups = \"drop\"),   by = \"file\") %>%    dplyr::left_join(  # get information about NON-injected droplets grn %>%    dplyr::filter(injected == 0) %>%    dplyr::group_by(file) %>%    dplyr::summarise(\"width_green_noninjected\" = median(width),                    \"voltage_green_noninjected\" = median(voltage),                    \"area_green_noninjected\" = median(area),                    .groups = \"drop\"),   by = \"file\") %>%    dplyr::left_join(      # get information about green drops when field is on grn %>%    dplyr::filter(ac_field == TRUE) %>%    dplyr::group_by(file) %>%    dplyr::summarise(\"n_droplets_on\" = dplyr::n(),                    \"missed_injections\" = sum(!injected) / dplyr::n()), # missed injection = field on, but not injected   by = \"file\") %>%    dplyr::left_join(      # get information about green drops when field is off grn %>%    dplyr::filter(ac_field == FALSE) %>%    dplyr::group_by(file) %>%    dplyr::summarise(\"n_droplets_off\" = dplyr::n(), # number of green peaks when field is off                    \"false_injections\" = sum(injected) / dplyr::n()), # false injections = field off, still injected   by = \"file\") %>%    dplyr::left_join(       # get information about red droplets red %>%    dplyr::filter(ac_field == TRUE) %>%    dplyr::group_by(file) %>%    dplyr::summarise(\"n_false_droplets\" = sum(is_false_drop)), # false droplets = number of de-novo red droplets   by = \"file\") %>%    dplyr::left_join(      # droplet leakage and false injections red %>%    dplyr::filter(ac_field == FALSE) %>%    dplyr::group_by(file) %>%    dplyr::summarise(\"n_leaked_droplets\" = sum(is_false_drop), # leaked droplets = number of de-novo red droplets                    \"n_red_droplets_off\" = dplyr::n()                    ),   by = \"file\" ) drops <- drops %>%    # calculate percentage of false/leaked droplets   dplyr::mutate(\"false_droplets\" = n_false_droplets/n_droplets_on,                 \"leaked_droplets\" = n_leaked_droplets/n_droplets_off) %>%    # compare injected vs. non-injected droplets   dplyr::mutate(\"delta_width\" = width_green_injected - width_green_noninjected,                 \"delta_voltage\" = voltage_green_injected - voltage_green_noninjected,                 \"delta_area\" = area_green_injected - area_green_noninjected,                 ) %>%    # convert signal widths into spatial widths   dplyr::mutate(\"width_green_injected_um\" = width_green_injected * velocity * 1e6,                 \"width_green_noninjected_um\" = width_green_noninjected * velocity * 1e6,                 \"delta_width_um\" = delta_width * velocity * 1e6) %>%    # convert spatial width into droplet diameter   dplyr::mutate(\"diameter_injected\" = sapply(width_green_injected_um, squeezed_length_to_diameter, 20, 30),                 \"diameter_noninjected\" = sapply(width_green_noninjected_um, squeezed_length_to_diameter, 20, 30)) %>%    # express injection pressure as ratio   dplyr::mutate(\"p_injection_relative\" = p_water/(q_emulsion + q_oil)) drops %>%    ggplot(aes(x = p_injection_relative, y = delta_width_um)) +    geom_point(aes(fill = q_emulsion + q_oil), shape = 21, size = 4) +   scale_fill_gradientn(colours = pal, trans = \"log\",                        breaks = unique(drops$q_emulsion + drops$q_oil)) +   theme_pretty_thesis() +    guides(fill = guide_legend(direction = \"horizontal\", title.position = \"top\", byrow = T)) +    labs(x = expression(\"Relative injection pressure \"* p[\"injection\"]/Q[\"total\"] * \" [mbar/µL/h]\"),        y = \"Delta width [µm]\",        fill = \"Total flowrate [µL/h]\") grDevices::pdf(\"lel.pdf\", width=16.5*2, height = 11.7*2) drops %>%    dplyr::select(c(-ac_v_pp, -ac_frequency, -n_droplets_on, -n_droplets_off, -n_false_droplets, -n_leaked_droplets, n_red_droplets_off, -delta_width, -width_green_injected, -width_green_noninjected, -file)) %>%    plot() grDevices::dev.off()"},{"path":"/articles/fads_picoinjector_characterization.html","id":"use-additional-imaging-data-to-correct-the-droplet-sizes-derived-from-pmt-signals-and-flow-rates","dir":"Articles","previous_headings":"Picoinjecting Atto488 into resorufin droplets (2023-01-26)","what":"Use additional imaging data to correct the droplet sizes derived from PMT signals and flow rates","title":"FADS-based Picoinjector Characterization","text":"Read droplet sizes derived image analysis compare: Summarize important statistics Correlate two droplet diameter measurements. translating measured droplet diameter corresponding equivalent droplet length, droplet squeezed channel (since ’s laser measures length). seems constant offset droplet sizes measured images, derived PMT signals. first five measurements, adjust chip position slightly, therefore laser focus slightly different subsequent acquisitions. Therefore, use two different width-correction values two groups. average offset : means, signal peaks measured PMT tubes detected MATLAB code average 26.18 (8.68 first laser focus spot configuration) µm wide. therefore subtract value signal length, computing corresponding droplet volume. Actually, second factor need corrected : droplet injected, total flow rate channel increases, therefore also fluid velocity. accounted calculating droplet velocities, deriving spatial droplet sizes .  Since theoretically pressure contributes linearly flowrate, , turn directly proportional fluid velocity, correct additional flow rate component scaling width accordingly Investigate difference signal width injected non-injected droplets: parameter combinations picoinjection possible, general?","code":"files <- list.files(\"data/fads/230126\", pattern = \"_kymograph_droplets.txt$\", full.names = TRUE) kymographDrops <- tibble::tibble() for (f in files) {   kymographDrops <- kymographDrops %>%      dplyr::bind_rows(       readr::read_table(f, show_col_types = FALSE) %>%          dplyr::mutate(\"file\" = stringr::str_extract(basename(f), \"\\\\d{8}_\\\\d{6}\")) %>%          # normalize intensity by droplet width         dplyr::mutate(\"intensity\" = intensity/width)     ) }  # add metadata kymographDrops <- kymographDrops %>%    dplyr::rename(c(\"video\" = \"file\")) %>%    dplyr::left_join(     readr::read_table(\"data/fads/230126/metadata.txt\", show_col_types = FALSE),     by = \"video\"   )  kymographDrops #> # A tibble: 1,769 × 14 #>    slice  left right width intensity video   file  q_oil p_water q_emu…¹ ac_v_pp #>    <dbl> <dbl> <dbl> <dbl>     <dbl> <chr>   <chr> <dbl>   <dbl>   <dbl>   <dbl> #>  1     5  16.5  58.3  41.7      325. 202301… Sign…   150     125      25       5 #>  2    13  41.7  82.2  40.4      308. 202301… Sign…   150     125      25       5 #>  3    32  16.1  57.8  41.7      326. 202301… Sign…   150     125      25       5 #>  4    39  41.7  82.2  40.4      321. 202301… Sign…   150     125      25       5 #>  5    46  16.5  57.8  41.3      320. 202301… Sign…   150     125      25       5 #>  6    53  41.7  82.2  40.4      316. 202301… Sign…   150     125      25       5 #>  7    59  15.2  57.0  41.7      329. 202301… Sign…   150     125      25       5 #>  8    67  41.7  82.2  40.4      311. 202301… Sign…   150     125      25       5 #>  9    87  14.3  55.2  40.9      322. 202301… Sign…   150     125      25       5 #> 10    94  41.7  82.2  40.4      312. 202301… Sign…   150     125      25       5 #> # … with 1,759 more rows, 3 more variables: ac_frequency <dbl>, t_off <dbl>, #> #   laser_focus <dbl>, and abbreviated variable name ¹​q_emulsion diametersKymo <- kymographDrops %>%   dplyr::filter(!is.na(file)) %>%    dplyr::group_by(file, video, laser_focus) %>%    dplyr::summarise(\"diameter_mean\" = mean(width),                    \"diameter_median\" = median(width),                    \"diameter_sd\" = sd(width),                    \"n_droplets\" = dplyr::n(),                    .groups = \"drop\") widthNotInjected <- kymographDrops %>%   dplyr::filter(is.na(file)) %>%    dplyr::group_by(video) %>%    dplyr::summarise(\"diameter_mean\" = mean(width)) %>%    dplyr::pull(diameter_mean) %>%    mean() diametersBoth <- drops %>%    dplyr::select(c(file, width_green_injected_um)) %>%    dplyr::left_join(diametersKymo, by = \"file\") %>%    dplyr::filter(!is.na(diameter_median)) %>%    # convert measured diameter in equivalent squeezed droplet length   dplyr::mutate(\"equivalent_squeezed_length\" = sapply(diameter_median, diameter_to_squeezed_length, 20, 30)) diametersBoth %>%    ggplot(aes(x = equivalent_squeezed_length, y = width_green_injected_um, color = as.factor(laser_focus))) +    geom_abline(slope = 1, intercept = 0) +   geom_point(aes(size = n_droplets)) +    theme_pretty_thesis() diametersBoth %>%    dplyr::group_by(laser_focus) %>%    dplyr::summarise(\"y_intercept\" = mean(width_green_injected_um - 1* equivalent_squeezed_length)) #> # A tibble: 2 × 2 #>   laser_focus y_intercept #>         <dbl>       <dbl> #> 1           1        8.68 #> 2           2       26.2 dropsCorrected <- drops %>%    dplyr::select(c(-width_green_injected, -width_green_noninjected, -delta_width)) %>%    dplyr::mutate(dplyr::case_when(file %in% c(\"Signal_0\", \"Signal_1\", \"Signal_2\", \"Signal_3\", \"Signal_4\") ~ dplyr::across(c(width_green_injected_um, width_green_noninjected_um), ~ .x -8.68),                                  .default = dplyr::across(c(width_green_injected_um, width_green_noninjected_um), ~ .x -26.19))) %>%    # convert squeezed width into sphere diameter   dplyr::mutate(\"diameter_injected\" = sapply(width_green_injected_um, squeezed_length_to_diameter, 20, 30),                 \"diameter_noninjected\" = sapply(width_green_noninjected_um, squeezed_length_to_diameter, 20, 30)) dropsCorrected %>%    ggplot(aes(x = p_water, y = diameter_noninjected)) +    geom_point()"},{"path":"/articles/fads_picoinjector_characterization.html","id":"other-stuff","dir":"Articles","previous_headings":"","what":"Other stuff","title":"FADS-based Picoinjector Characterization","text":"Filter outlier widths","code":""},{"path":"/articles/fads_picoinjector_characterization.html","id":"evaluate-switching-performance","dir":"Articles","previous_headings":"Other stuff","what":"Evaluate switching performance","title":"FADS-based Picoinjector Characterization","text":"Load RED signals Summarize every file field state calculate percentage false droplets.","code":""},{"path":"/articles/fads_picoinjector_characterization.html","id":"final-plots","dir":"Articles","previous_headings":"","what":"Final plots","title":"FADS-based Picoinjector Characterization","text":"wanna communicate plots: injected volumes can expected Injected volume consistency switchability flexibility injected volume operate picoinjector, operating regimes ? (max throughput, max percentage injected droplets, min percentage false droplets, high consistency injected volume) Plot distribution width values, times AC field switched , .e. droplets picoinjected therefore width supposed increase increasing injection pressure. Width distribution every signal:","code":""},{"path":"/articles/fads_picoinjector_characterization.html","id":"todo","dir":"Articles","previous_headings":"","what":"TODO","title":"FADS-based Picoinjector Characterization","text":"normalize width droplet velocity, able superimpose width distributions populations field switched , find location. Argument (signal-width-derived droplet size deviates )","code":""},{"path":[]},{"path":"/articles/fluidics.html","id":"straight-circular-channel","dir":"Articles","previous_headings":"Hydraulic resistance","what":"Straight circular channel","title":"Fluid Flow","text":"Hydraulic analogy Ohm’s law: \\[\\Delta P = R_h Q\\] \\(R_h\\) hydraulic resistance. (straight) channel circular cross-section, hydraulic resistance defined \\(R_h = \\frac{8 \\mu L}{\\pi r^4}\\) \\(\\mu\\) dynamic viscosity, \\(L\\) channel length, \\(r\\) channel radius (Bruus 2008). water using \\(\\mu = 8.9 \\cdot 10^{-4} \\; \\mathrm{Pa \\cdot s}\\). Plot hydraulic resistance tubing length:  Plot flow rate resulting pressure drop 1 Pa function tubing length:","code":"muWater <- 8.9e-4 radiusTygon <- 0.508e-3 /2 radiusPTFE <- 0.8e-3 /2  getHydraulicResistance <- function(mu, length, radius) {   return(8 * mu * length / pi / radius^4) } resistance <- tibble::tibble(\"length\" = seq(1,1000) * 1e-3, # unit: meters                \"tygon\" = getHydraulicResistance(muWater, length, radiusTygon),                \"ptfe\" = getHydraulicResistance(muWater, length, radiusPTFE)) %>%    tidyr::pivot_longer(!length, names_to = \"type\", values_to = \"r_hydraulic\") resistance #> # A tibble: 2,000 × 3 #>    length type  r_hydraulic #>     <dbl> <chr>       <dbl> #>  1  0.001 tygon  544496703. #>  2  0.001 ptfe    88529937. #>  3  0.002 tygon 1088993406. #>  4  0.002 ptfe   177059874. #>  5  0.003 tygon 1633490109. #>  6  0.003 ptfe   265589811. #>  7  0.004 tygon 2177986812. #>  8  0.004 ptfe   354119748. #>  9  0.005 tygon 2722483515. #> 10  0.005 ptfe   442649685. #> # … with 1,990 more rows  ggplot(resistance, aes(x = length*1e2, y = r_hydraulic*1e-11, color = type)) +    geom_line() +    scale_color_viridis_d(labels = c(\"PTFE\", \"Tygon\")) +    labs(x = \"Tubing length [cm]\",        y = \"Hydraulic resistance [10¹¹ Pa s m⁻³]\",        color = \"Tubing type\") +    theme_pretty() resistance %>%    dplyr::mutate(\"q\" = 1 / r_hydraulic) %>%   dplyr::filter(length >= 0.05) %>% # ignore tubing lengths < 5cm   ggplot(aes(x = length*1e2, y = q * 1e9, color = type)) + # convert m^3/s into uL/s   geom_line() +    scale_color_viridis_d(labels = c(\"PTFE\", \"Tygon\")) +    labs(x = \"Tubing length [cm]\",        y = \"Flow rate at 1 Pa [uL/s]\",        color = \"Tubing type\") +    theme_pretty()"},{"path":"/articles/fluidics.html","id":"straight-rectangular-channel","dir":"Articles","previous_headings":"Hydraulic resistance","what":"Straight rectangular channel","title":"Fluid Flow","text":"TODO","code":""},{"path":"/articles/fluidics.html","id":"networks","dir":"Articles","previous_headings":"Hydraulic resistance","what":"Networks","title":"Fluid Flow","text":"TODO","code":""},{"path":[]},{"path":[]},{"path":"/articles/hydraulic_resistance.html","id":"straight-circular-channel","dir":"Articles","previous_headings":"Hydraulic resistance","what":"Straight circular channel","title":"Fluid Flow","text":"Hydraulic analogy Ohm’s law: \\[\\Delta P = R_h Q\\] \\(R_h\\) hydraulic resistance. (straight) channel circular cross-section, hydraulic resistance defined \\(R_h = \\frac{8 \\mu L}{\\pi r^4}\\) \\(\\mu\\) dynamic viscosity, \\(L\\) channel length, \\(r\\) channel radius (Bruus 2008). water using \\(\\mu = 8.9 \\cdot 10^{-4} \\; \\mathrm{Pa \\cdot s}\\). Plot hydraulic resistance tubing length:  Plot flow rate resulting pressure drop 1 Pa function tubing length:","code":"muWater <- 8.9e-4 radiusTygon <- 0.508e-3 /2 radiusPTFE <- 0.8e-3 /2  getHydraulicResistance <- function(mu, length, radius) {   return(8 * mu * length / pi / radius^4) } resistance <- tibble::tibble(\"length\" = seq(1,1000) * 1e-3, # unit: meters                \"tygon\" = getHydraulicResistance(muWater, length, radiusTygon),                \"ptfe\" = getHydraulicResistance(muWater, length, radiusPTFE)) %>%    tidyr::pivot_longer(!length, names_to = \"type\", values_to = \"r_hydraulic\") resistance #> # A tibble: 2,000 × 3 #>    length type  r_hydraulic #>     <dbl> <chr>       <dbl> #>  1  0.001 tygon  544496703. #>  2  0.001 ptfe    88529937. #>  3  0.002 tygon 1088993406. #>  4  0.002 ptfe   177059874. #>  5  0.003 tygon 1633490109. #>  6  0.003 ptfe   265589811. #>  7  0.004 tygon 2177986812. #>  8  0.004 ptfe   354119748. #>  9  0.005 tygon 2722483515. #> 10  0.005 ptfe   442649685. #> # … with 1,990 more rows  ggplot(resistance, aes(x = length*1e2, y = r_hydraulic*1e-11, color = type)) +    geom_line() +    scale_color_viridis_d(labels = c(\"PTFE\", \"Tygon\")) +    labs(x = \"Tubing length [cm]\",        y = \"Hydraulic resistance [10¹¹ Pa s m⁻³]\",        color = \"Tubing type\") +    theme_pretty() resistance %>%    dplyr::mutate(\"q\" = 1 / r_hydraulic) %>%   dplyr::filter(length >= 0.05) %>% # ignore tubing lengths < 5cm   ggplot(aes(x = length*1e2, y = q * 1e9, color = type)) + # convert m^3/s into uL/s   geom_line() +    scale_color_viridis_d(labels = c(\"PTFE\", \"Tygon\")) +    labs(x = \"Tubing length [cm]\",        y = \"Flow rate at 1 Pa [uL/s]\",        color = \"Tubing type\") +    theme_pretty()"},{"path":"/articles/hydraulic_resistance.html","id":"straight-rectangular-channel","dir":"Articles","previous_headings":"Hydraulic resistance","what":"Straight rectangular channel","title":"Fluid Flow","text":"TODO","code":""},{"path":"/articles/hydraulic_resistance.html","id":"networks","dir":"Articles","previous_headings":"Hydraulic resistance","what":"Networks","title":"Fluid Flow","text":"TODO","code":""},{"path":[]},{"path":"/articles/logfiles.html","id":"syringe-pump","dir":"Articles","previous_headings":"","what":"syringe pump","title":"Log Files","text":"Cetoni syringe pump log file can loaded using convenience function logfile_read_syringepump. reads CSV file formats columns little bit. (function works particular configuration log file Cetoni Elements software.) can seen every row contains absolute time stamp allow us associate flowrate images data acquired microscope. shown later, pressure controller log file contain absolute timestamps, just column elapsed time. However, aligning flowrate pressure profiles, absolute time stamp can also inferred pressure log. end, one include alignment mark experiment, e.g. setting , pressure syringe pump specific value exact time. inspecting resulting profiles, one can identify alignment mark shift pressure profile alignment marks conincide time. overview graph syringe pump flowrate can plotted using logfile_plot_syringepump.  , alignment mark end experiment, around minute 81, flowrate channel 2 pressure channel 2 set zero. Zoom x-axis find precise time:  Investigate logfile rows order find exact time q2 set zero:","code":"syringe <- logfile_read_syringepump(\"data/logfiles/syringe_pump_log_20220805_150634.csv\") syringe #> # A tibble: 149,607 × 4 #>    elapsed_time timestamp               channel flowrate #>           <dbl> <dttm>                  <chr>      <dbl> #>  1          0   2022-08-05 15:06:34.569 q1            10 #>  2          0   2022-08-05 15:06:34.569 q2            10 #>  3          0   2022-08-05 15:06:34.569 q3             0 #>  4          0.1 2022-08-05 15:06:34.669 q1            10 #>  5          0.1 2022-08-05 15:06:34.669 q2            10 #>  6          0.1 2022-08-05 15:06:34.669 q3             0 #>  7          0.2 2022-08-05 15:06:34.769 q1            10 #>  8          0.2 2022-08-05 15:06:34.769 q2            10 #>  9          0.2 2022-08-05 15:06:34.769 q3             0 #> 10          0.3 2022-08-05 15:06:34.868 q1            10 #> # … with 149,597 more rows logfile_plot_syringepump(syringe) logfile_plot_syringepump(syringe) +   xlim(c(81.5, 82)) #> Warning: Removed 148704 rows containing missing values (`geom_line()`). syringe %>%    filter(channel == \"q2\",          elapsed_time > 4904 & elapsed_time < 4905) #> # A tibble: 9 × 4 #>   elapsed_time timestamp               channel flowrate #>          <dbl> <dttm>                  <chr>      <dbl> #> 1        4904. 2022-08-05 16:28:17.611 q2           300 #> 2        4904. 2022-08-05 16:28:17.711 q2           300 #> 3        4904. 2022-08-05 16:28:17.812 q2           300 #> 4        4904. 2022-08-05 16:28:17.911 q2           300 #> 5        4904. 2022-08-05 16:28:18.012 q2           300 #> 6        4905. 2022-08-05 16:28:18.111 q2             0 #> 7        4905. 2022-08-05 16:28:18.211 q2             0 #> 8        4905. 2022-08-05 16:28:18.312 q2             0 #> 9        4905. 2022-08-05 16:28:18.411 q2             0"},{"path":"/articles/logfiles.html","id":"pressure-controller","dir":"Articles","previous_headings":"","what":"pressure controller","title":"Log Files","text":"drawback pressure controller log files , system time stored. Therefore, need align pressure profile syringe pump profile order get information.  Find time p2 set zero:","code":"pressure <- logfile_read_pressure(\"data/logfiles/pressure_log.txt\") pressure #> # A tibble: 394,856 × 4 #>    elapsed_time channel value    mbar #>           <dbl> <chr>   <chr>   <dbl> #>  1          0   p1      target  0     #>  2          0   p1      read    0.612 #>  3          0   p2      target 50     #>  4          0   p2      read   50.0   #>  5          0   p3      target  0     #>  6          0   p3      read    0.970 #>  7          0   p4      target  0     #>  8          0   p4      read    0.833 #>  9          0.1 p1      target  0     #> 10          0.1 p1      read    0.605 #> # … with 394,846 more rows logfile_plot_pressure(pressure) pressure %>%    filter(channel == \"p2\",          value == \"target\",          elapsed_time > 4861.5 & elapsed_time < 4862.5) #> # A tibble: 9 × 4 #>   elapsed_time channel value   mbar #>          <dbl> <chr>   <chr>  <dbl> #> 1        4862. p2      target   554 #> 2        4862. p2      target   554 #> 3        4862. p2      target   554 #> 4        4862. p2      target   554 #> 5        4862  p2      target   554 #> 6        4862. p2      target     0 #> 7        4862. p2      target     0 #> 8        4862. p2      target     0 #> 9        4862. p2      target     0"},{"path":"/articles/logfiles.html","id":"align-profiles","dir":"Articles","previous_headings":"","what":"align profiles","title":"Log Files","text":"times pressure syringe pump logs aligned? Align pressure log syringe pump log:","code":"tPressure <- 4862.1 tSyringe <- 4904.6 pressureAligned <- logfile_align_pressure(pressure, syringe, tPressure, tSyringe) pressureAligned #> # A tibble: 394,856 × 5 #>    elapsed_time timestamp               channel value    mbar #>           <dbl> <dttm>                  <chr>   <chr>   <dbl> #>  1         42.5 2022-08-05 15:07:17.069 p1      target  0     #>  2         42.5 2022-08-05 15:07:17.069 p1      read    0.612 #>  3         42.5 2022-08-05 15:07:17.069 p2      target 50     #>  4         42.5 2022-08-05 15:07:17.069 p2      read   50.0   #>  5         42.5 2022-08-05 15:07:17.069 p3      target  0     #>  6         42.5 2022-08-05 15:07:17.069 p3      read    0.970 #>  7         42.5 2022-08-05 15:07:17.069 p4      target  0     #>  8         42.5 2022-08-05 15:07:17.069 p4      read    0.833 #>  9         42.6 2022-08-05 15:07:17.168 p1      target  0     #> 10         42.6 2022-08-05 15:07:17.168 p1      read    0.605 #> # … with 394,846 more rows"},{"path":"/articles/logfiles.html","id":"plot","dir":"Articles","previous_headings":"","what":"plot","title":"Log Files","text":"Remove unused channels: Merge pressure syringe dataframes:","code":"syringe <- syringe %>%    dplyr::filter(channel != \"q3\") pressureAligned <- pressureAligned %>%    dplyr::filter(channel == \"p2\") # find out by how much the second y-axis has to be scaled: r <- max(syringe$flowrate) / max(pressureAligned$mbar) df1 <- syringe %>%    dplyr::rename(value = flowrate) %>%    dplyr::mutate(type = \"syringe pump\")  df2 <- pressureAligned %>%    dplyr::filter(value == \"target\") %>%    dplyr::select(!value) %>%    dplyr::rename(value = mbar) %>%    dplyr::mutate(type = \"pressure controller\")  # scale pressure df2 <- df2 %>%    dplyr::mutate(value = value * r)   df <- dplyr::bind_rows(df1, df2) ggplot(df, aes(x = elapsed_time / 60, y  = value, color = channel, linetype = type)) +    geom_line() +    scale_y_continuous(sec.axis = sec_axis(trans = ~./r, name = \"Pressure [mbar]\")) +    theme_pretty() +    labs(y = \"Flowrate [ul/h]\",        x = \"Elapsed time [min]\",        linetype = \"Instrument\",        color = \"Channel\")"},{"path":"/articles/spincurves.html","id":"introduction","dir":"Articles","previous_headings":"","what":"introduction","title":"SU-8 3035 Spincurve Analysis","text":"microfluidic chips, channel heights range 20-30 um desired. obtain heights photolithography process, photoresist suitable viscosity required. spin curves SU-8 3000 series (“SU-8 3000 Microstructure Fabrication  Kayaku Advanced Materials. Kayaku Advanced Materials, Inc.” n.d.). seems like SU-8 3035 can yield thicknesses desired range (extrapolating higher RPMs, experience 6000 RPM 30 um thickness can achieved SU-8 3050). Therefore, 115.2 g SU-8 3050 mixed 1.42 g thinner solution, order obtain custom dilution mimics behaviour SU-8 3035. following, SU-8 3035 refers custom dilution. preparation SU-8 3035, spin curve analysis conducted characterize relation spin speed film thickness custom photoresist. end, cross pattern (see image) exposed cleaned re-used silicon wafers, spin-coating SU-8 3035 3000, 4000, 5000 RPM, respectively. RPM, three chips prepared: two chips using spin duration 30s (duplicate measurements), one chip using spin duration 60 s. Therefore, total, nine wafers prepared.  photolithography, resulting height profiles measured using Dektak profilometer. Unfortunately, measuring long distances machine, measurements drifting away reference level quite significantly, necessitates correction data evalutation. Therefore, cross structure exposed wafer includes repeated gaps order pick zero-level along entire wafer. wafer ids corresponding certain combination spin time spin speed: wafer, four traces measured: top--bottom, left--right, bottom--top, right--left (see figure). results duplicate measurements structures. vignette, post-processing drift correction Dektak data carried . includes: reading CSV files, recognition reference level segments, drift correction, averaging duplicate measurements, interpolation height profiles gaps structure.","code":"library(picoinjector) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(tibble) library(readr) library(stringr) library(ggplot2) # library(tidyr)"},{"path":"/articles/spincurves.html","id":"data-loading","dir":"Articles","previous_headings":"","what":"data loading","title":"SU-8 3035 Spincurve Analysis","text":"Get file names: Read csv files concatenate single tibble dataframe: Add information spin speed duration: raw data looks like :","code":"files <- list.files(\"data/spincurve_csv/\", full.names = TRUE) head(files) #> [1] \"data/spincurve_csv//00_job9945_eastwest.csv\"   #> [2] \"data/spincurve_csv//01_job9945_northsouth.csv\" #> [3] \"data/spincurve_csv//01_job9945_westeast.csv\"   #> [4] \"data/spincurve_csv//02_job9946_southnorth.csv\" #> [5] \"data/spincurve_csv//03_job9945_southnorth.csv\" #> [6] \"data/spincurve_csv//03_job9950_northsouth.csv\" results <- tibble() for (f in files) {   d <- read_csv(f, skip = 19, show_col_types = FALSE, col_names = c(\"position\", \"height\")) %>%      select(position, height) %>%      mutate(id = basename(f)) # add the wafer id   results <- bind_rows(results, d) } results #> # A tibble: 2,815,001 × 3 #>    position height id                      #>       <dbl>  <dbl> <chr>                   #>  1      0     1.85 00_job9945_eastwest.csv #>  2      0.5   1.22 00_job9945_eastwest.csv #>  3      1     0.59 00_job9945_eastwest.csv #>  4      1.5   0    00_job9945_eastwest.csv #>  5      2    -0.51 00_job9945_eastwest.csv #>  6      2.5  -0.95 00_job9945_eastwest.csv #>  7      3    -1.32 00_job9945_eastwest.csv #>  8      3.5  -1.63 00_job9945_eastwest.csv #>  9      4    -1.88 00_job9945_eastwest.csv #> 10      4.5  -2.08 00_job9945_eastwest.csv #> # … with 2,814,991 more rows # table relating wafer id with RPM rpm <- c(job9945 = 3000, job9946 = 3000, job9947 = 4000, job9948 = 4000,          job9949 = 5000, job9950 = 5000, job10053 = 4000, job10054 = 5000, job10055 = 3000)  # table relating wafer id with seconds at max RPM spinTime <- c(job9945 = 30, job9946 = 30, job9947 = 30, job9948 = 30,          job9949 = 30, job9950 = 30, job10053 = 60, job10054 = 60, job10055 = 60)  results <- results %>%    mutate(wafer = str_extract(id, \"job\\\\d+\"),          direction = str_extract(id, \"[a-z]+\\\\.\") %>%             str_remove(\"\\\\.\"),          orientation = case_when(direction %in% c(\"eastwest\", \"westeast\") ~ \"horizontal\",                                  TRUE ~ \"vertical\"),          rpm = rpm[wafer],          spintime = spinTime[wafer]) %>%    # order rows by wafer, direction and position   group_by(rpm, spintime, direction) %>%    arrange(rpm, spintime, .by_group = TRUE) %>%    ungroup() results #> # A tibble: 2,815,001 × 8 #>    position height id                      wafer   direc…¹ orien…²   rpm spint…³ #>       <dbl>  <dbl> <chr>                   <chr>   <chr>   <chr>   <dbl>   <dbl> #>  1      0     1.85 00_job9945_eastwest.csv job9945 eastwe… horizo…  3000      30 #>  2      0.5   1.22 00_job9945_eastwest.csv job9945 eastwe… horizo…  3000      30 #>  3      1     0.59 00_job9945_eastwest.csv job9945 eastwe… horizo…  3000      30 #>  4      1.5   0    00_job9945_eastwest.csv job9945 eastwe… horizo…  3000      30 #>  5      2    -0.51 00_job9945_eastwest.csv job9945 eastwe… horizo…  3000      30 #>  6      2.5  -0.95 00_job9945_eastwest.csv job9945 eastwe… horizo…  3000      30 #>  7      3    -1.32 00_job9945_eastwest.csv job9945 eastwe… horizo…  3000      30 #>  8      3.5  -1.63 00_job9945_eastwest.csv job9945 eastwe… horizo…  3000      30 #>  9      4    -1.88 00_job9945_eastwest.csv job9945 eastwe… horizo…  3000      30 #> 10      4.5  -2.08 00_job9945_eastwest.csv job9945 eastwe… horizo…  3000      30 #> # … with 2,814,991 more rows, and abbreviated variable names ¹​direction, #> #   ²​orientation, ³​spintime profile <- results %>%    # filter for single trace   filter(id == \"00_job9945_eastwest.csv\")  plot_heightprofile(profile)"},{"path":"/articles/spincurves.html","id":"baseline-correction","dir":"Articles","previous_headings":"","what":"baseline correction","title":"SU-8 3035 Spincurve Analysis","text":"Now use geometrical information design determine peaks valleys trace. First, find positions (x coordinate) leftmost rightmost structure using slope graph, rescale everything spans known width 40.5 mm written wafer. rescaling necessary case trace perfectly aligned structure, .e. slightly diagonal therefore little bit longer.  find x coordinate first structure begins, calculate first derivative height profile (lagged differences) order identify regions large slope. first derivative graph looks like :  lag parameter defines sliding window size used difference calculation can used smooth resulting derivative plot. remainder analysis, use lag = 10. function finds index first edge height profile, correspond edge first structure wafer (left--right). x coordinate derivative first exceeds give threshold minSlope identified edge. analysis using minSlope = 500. Now defined function can used determine start end coordinate profile. Using information, total length profile can rescaled cover 40.5 mm known initial AutoCAD design. function detects beginning end height profile rescales corresponding lateral position rescaled profile looks like . Note beginning end truncated, compared plot trace shown .  Next, geometrical information known AutoCAD design can used identify peaks valleys present design. valleys, height profile sampled discrete points order capture baseline shift. discrete baseline points later used fit continuous baseline curve. sampled baseline data points look like :  Use LOESS regression fit curve baseline data points: Regression baseline points looks like :  Note: loess regression doesn’t allow extrapolation, removes leftmost rightmost data points. regression line can subtracted height data order level valleys zero.  function combines steps: Iterate traces correct baseline shift: function can used plot baseline-corrected profiles every wafer:  can seen overview plot, baseline correction method seems work profiles.","code":"profile %>%    filter(position < 1000) %>% # zoom at left-most peak   plot_heightprofile() # lagged differences parameters lag <- 10 dif <- 1 offset <- dif * lag  # calculate derivative derivative <- tibble(   \"d_height\" = diff(profile$height, lag = lag, differences = dif) / diff(profile$position, lag = lag, differences = dif),   # adjust dimension of x axis (lagging difference removes the first l elements):   \"position\" = profile$position[(offset+1):length(profile$position)] )  derivative %>%    filter(position < 1000) %>% # zoom to first structure   ggplot(aes(x = position, y = d_height)) +   geom_line() +    labs(title = \"Derivative of height profile\",        subtitle = paste(\"Lag =\", lag, \", difference order =\", dif),        x = \"Lateral position [um]\",        y = \"Lagged difference magnitude\") +    theme_pretty() get_index_first_peak <- function(values, minSlope) {   # find the first maximum   i <- 1   while (TRUE) {     if (values[i] > minSlope) {       return(i)     }     i <- i+1   } } get_index_first_peak(derivative$d_height, 500) #> [1] 816 rescale_profile <- function(profile, lag, minSlope) {   # calculate derivative of height w.r.t. position   dHeight <- diff(profile[[\"height\"]], lag = lag) / diff(profile[[\"position\"]], lag = lag)   # get index of first peak   first <- get_index_first_peak(dHeight, minSlope)   # get index of last peak   last <- get_index_first_peak(rev(dHeight)* (-1), minSlope)      # convert indices into corresponding position value   posFirst <- profile[[\"position\"]][first + lag]   posLast <- rev(profile[[\"position\"]])[last]      # rescale everything: distance between first and last position should be exactly 45mm   # discard data outside of the interval   profile[(first + lag):(nrow(profile)-last), ] %>%      mutate(position = seq(0, 40500, length.out = n())) %>%      return() } profileRescaled <- profile %>%    rescale_profile(lag = 10, minSlope = 500)  plot_heightprofile(profileRescaled) get_baseline_points <- function(profile) {   # sample points to capture the baseline   samplePoints <- seq(750, 40500, by = 1000)   # exclude center region (has no gap)   samplePoints <- samplePoints[samplePoints < 19000 | samplePoints > 21500]   xIndices <- sapply(samplePoints, function(x,y) which.min(abs(x-y)), profile[[\"position\"]])      # return baseline points   tibble(\"position\" = profile[[\"position\"]][xIndices],          \"height\" = profile[[\"height\"]][xIndices]) %>%      return() } baselinePoints <- profileRescaled %>%    get_baseline_points()  baselinePoints #> # A tibble: 38 × 2 #>    position  height #>       <dbl>   <dbl> #>  1     750.  126.   #>  2    1750.  206.   #>  3    2750.  246.   #>  4    3750.  236.   #>  5    4750.  174.   #>  6    5750.   92.9  #>  7    6750.   -2.16 #>  8    7750. -151.   #>  9    8750. -310.   #> 10    9750. -436.   #> # … with 28 more rows  profileRescaled %>%    plot_heightprofile() +   geom_point(data = baselinePoints, shape = 23, color = \"firebrick1\") baseline_regression <- function(profile, baselinePoints, loessSpan) {   # LOESS regression to fit a function to the baseline data points   loessModel <- loess(height ~ position, data = baselinePoints, span = loessSpan)      # extrapolate   profile %>%      mutate(\"baseline\" = predict(loessModel, position)) %>%      return() } profileRescaled %>%    baseline_regression(baselinePoints, loessSpan = 0.2) %>%    plot_heightprofile() +   geom_line(aes(y = baseline), color = \"firebrick2\") #> Warning: Removed 3004 rows containing missing values (`geom_line()`). subtract_baseline <- function(profile) {   profile %>%      mutate(height = height - baseline) %>%      filter(!is.na(height)) %>%      select(!baseline) %>%      return() }  profileRescaled %>%    baseline_regression(baselinePoints, loessSpan = 0.2) %>%    subtract_baseline() %>%    plot_heightprofile() baseline_correction <- function(profile) {   # lag and minSlope are hardcoded in here!   rescaled <- profile %>%      rescale_profile(10, 500)      baselinePoints <- rescaled %>%      get_baseline_points()      rescaled %>%      baseline_regression(baselinePoints, 0.2) %>%      subtract_baseline() %>%      return() } resultsCorrected <- tibble() for (traceId in unique(results$id)) {   corrected <- results %>%      filter(id == traceId) %>%      baseline_correction()   resultsCorrected <- bind_rows(resultsCorrected, corrected) } p <- plot_heightprofile_bywafer(resultsCorrected) print(p)"},{"path":"/articles/spincurves.html","id":"post-processing","dir":"Articles","previous_headings":"","what":"post-processing","title":"SU-8 3035 Spincurve Analysis","text":"next step analysis summarize duplicate measurements exist every structure, interpolate height profile across gaps, order obtain comprehensive plot describes spin coating thickness function radial distance wafer center, well RPM spin time. Function removes baseline segments data using known locations valleys structure, interpolating values surrounding data: resulting height profile contain gaps anymore:  traces show single plot:  wafer, four traces measured, pairs two identical : trace south-north measures structure north-south, true traces east-west west-east. graph, similarity obvious, measurement directions reversed (west-east goes left--right east-west way around). Therefore, two four traces reversed, measurement directions top--bottom left--right. Furthermore, data centered around zero, origin located wafer center. Now lot similarity going height profiles. four traces, horizontal vertical direction, respectively, overlapping large degree.  single wafer:  duplicate measurements horizontal vertical structure averaged.  Finally, since spin coating process radially symmetrical less (ideally), want describe height profile function radial distance wafer center. end, data negative position coordinate flipped positive range. { width=50% }  Plot RPM spintime:","code":"# Geometrically, a valley is 500 um wide. Set to a larger value than that to filter out overshoots in the signal at the edges interpolate_valleys <- function(profile, width = 650) {      ## 1. remove gap data   # the baseline centers are supposed to be located right in the middle of the valleys   baselineCenters <- seq(-250, 42000, by = 1000)   # exclude middle region   # baselineCenters <- baselineCenters[baselineCenters < 19000 | baselineCenters > 21500]   baselinePositions <- sapply(baselineCenters, function(x) seq(x-0.5*width, x + 0.5*width)) %>%      as.numeric()      positionsRounded <- round(profile[[\"position\"]])   idx <- !positionsRounded %in% baselinePositions      positions <- profile$position[idx]   height <- profile$height[idx]      ## 2. interpolate between gaps   a <- approx(positions, height, profile$position)      profile %>%      mutate(height = a$y) %>%      filter(!is.na(height)) %>%      return() } resultsCorrected %>%    filter(id == \"00_job9945_eastwest.csv\") %>%    interpolate_valleys() %>%    plot_heightprofile() +    ylim(c(0, 50000)) resultsInterpolated <- tibble() for (traceId in unique(resultsCorrected$id)) {   r <- resultsCorrected %>%      filter(id == traceId) %>%      interpolate_valleys()   resultsInterpolated <- bind_rows(resultsInterpolated, r) } ggplot(resultsInterpolated, aes(x = position, y = height, color = direction)) +    geom_line() +    geom_hline(yintercept = 0) +    facet_wrap(~ wafer) +    theme_pretty() +    labs(x = \"Lateral position [um]\",        y = \"Height [nm]\",        color = \"Trace\") mirror_and_center <- function(resultsInterpolated) {   resultsInterpolated %>%      group_by(wafer, direction) %>%      arrange(position, .by_group = TRUE) %>%      mutate(height = case_when(direction %in% c(\"southnorth\", \"eastwest\") ~ rev(height),                                         TRUE ~ height)) %>%      # center around zero     mutate(position = position - 0.5 * max(position)) %>%      ungroup() %>%      return() } heights <- resultsInterpolated %>%    mirror_and_center()  ggplot(heights, aes(x = position, y = height, color = direction)) +    geom_line() +    geom_hline(yintercept = 0) +    facet_wrap(~ wafer) +    theme_pretty() +    labs(x = \"Lateral position [um]\",        y = \"Height [nm]\",        color = \"Trace\") heights %>%    filter(wafer == \"job9946\") %>%    ggplot(aes(x = position, y = height, color = direction)) +    geom_line() +    geom_hline(yintercept = 0) +    theme_pretty() +    labs(x = \"Position from wafer center [um]\",        y = \"Height [nm]\",        color = \"Trace direction\") average_duplicate_traces <- function(heights) {   heights %>%      mutate(position = round(position)) %>%      group_by(rpm, wafer, spintime, orientation, position) %>%      summarise(height = round(mean(height)),               height_sd = sd(height),               .groups = \"drop\") %>%      return() } heights <- heights %>%    average_duplicate_traces()  heights %>%    ggplot(aes(x = position, y = height, color = orientation)) +    geom_line() +    geom_hline(yintercept = 0) +    theme_pretty() +    labs(x = \"Position from wafer center [um]\",        y = \"Height [nm]\",        color = \"Trace direction\") +    facet_wrap(~ wafer) make_radial <- function(heights) {   heights %>%      mutate(quadrant = case_when(orientation == \"vertical\" & position < 0 ~ \"south\",                                 orientation == \"vertical\" & position >= 0 ~ \"north\",                                 orientation == \"horizontal\" & position < 0 ~ \"west\",                                 orientation == \"horizontal\" & position >= 0 ~ \"east\",                                 TRUE ~ \"ERROR\")) %>%      # flip values with negative position coordinate into positive range     mutate(position = case_when(position < 0 ~ -position,                                 TRUE ~ position)) %>%      ungroup() %>%      return() }  heightsRadial <- heights %>%    make_radial() ggplot(heightsRadial, aes(x = position, y = height, color = quadrant)) +    geom_line() +    geom_hline(yintercept = 0) +    facet_wrap(~ wafer) +    theme_pretty() +    labs(x = \"Distance from wafer center [um]\",        y = \"Height [nm]\",        color = \"Quadrant\") for (r in unique(heightsRadial$rpm)) {   p <- heightsRadial %>%      filter(rpm == r) %>%      ggplot(aes(x = position*1e-3, y = height*1e-3, color = wafer)) +      geom_vline(xintercept = 25.4, linetype = \"dashed\") +     geom_line(aes(group = interaction(wafer, quadrant), linetype = factor(spintime)), size = 0.5, alpha = 0.7) +      labs(x = \"Distance from wafer center [mm]\",          y = \"Coating thickness [um]\",          linetype = \"Spintime [s]\",          color = \"Wafer id\",          title = paste(r, \"RPM\")) +      scale_color_viridis_d() +      theme_pretty() +      ylim(c(0, 60))   print(p) } #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead."},{"path":"/articles/spincurves.html","id":"conclusions","dir":"Articles","previous_headings":"","what":"conclusions","title":"SU-8 3035 Spincurve Analysis","text":"spin coating results circular inner region uniform thickness outer rim thicker coating spinning longer time (60 instead 30 s) seems expand inner region higher variation thickness across wafers lower RPM (3000, 4000) place chip designs radially symmetrical wafer increase uniformness","code":""},{"path":[]},{"path":"/articles/thesis_plots.html","id":"background","dir":"Articles","previous_headings":"","what":"2 Background","title":"Thesis Plots","text":"Relative sizes things logarithmic scale:  Save PDF: Poisson distribution different \\(\\lambda\\):  Evaluate Poisson PDF function lambda:  Patchwork:","code":"# define locations of vertical dashed lines vLines <- c(\"atom\" = 0.1e-9, \"DNA\" = 2e-9, \"protein\" = 4.2e-9, \"phage\" = 55e-9, \"virus\" = 100e-9, \"bacteria\" = 3e-6, \"animal_cell\" = 20e-6, \"plant_cell\" = 80e-6, \"drosophilia\" = 3e-3, \"human\" = 1.8) vLines #>        atom         DNA     protein       phage       virus    bacteria  #>     1.0e-10     2.0e-09     4.2e-09     5.5e-08     1.0e-07     3.0e-06  #> animal_cell  plant_cell drosophilia       human  #>     2.0e-05     8.0e-05     3.0e-03     1.8e+00  # define locations of range dashed lines rangesXmin <- c(3e-9, 10e-6, 10e-6, 10e-6) rangesXmax <- c(6e-9, 30e-6, 100e-6, 1e-3) rangesY <- c(0.05, 0.1, 0.2, 0.13)  # x coordinates for axis labels xBreaks <- 10^seq(-10, 1) names(xBreaks) <- c(\"0.1 nm\", \"1 nm\", \"10 nm\", \"100 nm\", \"1 µm\", \"10 µm\", \"100 µm\", \"1 mm\", \"10 mm\", \"100 mm\", \"1 m\")   ggplot() +    geom_vline(xintercept = vLines, alpha = 0.2, linetype = \"dashed\") +    geom_errorbarh(aes(xmin = rangesXmin, xmax = rangesXmax, y = rangesY), alpha = 0.2, linetype = \"dashed\", height = 0.05) +   # geom_rect(aes(xmin = 10e-6, xmax = 30e-6, ymin = 0, ymax = Inf), alpha = 0.2) +   # geom_tile(aes(x = 20e-6, y = 0, width = 20e-6, height = Inf), color = \"red\") +   scale_x_log10(breaks = xBreaks) +    scale_y_continuous(breaks = c(), limits = c(0,1), expand = expansion(add = 0)) +    theme_pretty_thesis() +    theme(axis.title.y = element_blank()) # annotation_logticks(side = \"b\", color = \"gray\") grDevices::pdf(file = \"output/plots/02_relative_sizes.pdf\", width = textwidth, height = textwidth/3, ) print(last_plot()) grDevices::dev.off() #> agg_png  #>       2 p1 <- tidyr::crossing(\"k\" = seq(0,6),                 \"lambda\" = c(0.1, 0.25, 1, 2, 5)) %>%    dplyr::mutate(\"p\" = dpois(k, lambda)) %>%    ggplot(aes(x = k, y = p)) +    geom_line(aes(color = factor(lambda)), linetype = \"dashed\") +    geom_point(aes(fill = factor(lambda)), shape = 21) +    scale_x_continuous(breaks = seq(0,6)) +    # scale_y_continuous(breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +    theme_pretty_thesis() +    scale_fill_manual(values = wes_palette(\"Darjeeling1\")) +    scale_color_manual(values = wes_palette(\"Darjeeling1\")) +    theme(     # panel.grid.major = element_line(color = \"black\", linewidth = 0.1),         legend.position = c(1,1),         legend.justification = c(1,1)) +    labs(y = expression(p(lambda, k)),        x = \"k\",        color = expression(lambda),        fill = expression(lambda),        tag = \"A\") +    ylim(c(0,1)) +   coord_cartesian(expand =F) p1 p2 <- tibble::tibble(\"lambda\" = seq(0,2,0.01),                \"single\" = stats::dpois(1, lambda),                \"empty\" = stats::dpois(0, lambda),                \"multiple\" = 1 - stats::ppois(1, lambda)) %>%    tidyr::pivot_longer(!lambda) %>%    ggplot(aes(x = lambda, y = value, linetype = name)) +    geom_line() +   scale_linetype_discrete(labels = c(expression(p(k == 0)), expression(p(k==1)), expression(p(k >= 1))),                           guide = guide_legend(title = NULL, title.position = \"left\")) +    theme_pretty_thesis() +    theme(legend.position = c(1,1),         legend.justification = c(1,1),         legend.key.width = unit(0.5, \"cm\")) +   coord_cartesian(expand = F) +    labs(x = expression(lambda),        y = expression(p(lambda, k)),        tag = \"B\") p2 p1 + p2 &   theme(plot.margin = margin(r = 4, t = 3)) grDevices::pdf(file = \"output/plots/02_poisson_distribution.pdf\", width = textwidth, height = textwidth/2, ) print(last_plot()) grDevices::dev.off() #> agg_png  #>       2"},{"path":"/articles/thesis_plots.html","id":"results","dir":"Articles","previous_headings":"","what":"4 Results","title":"Thesis Plots","text":"","code":"fads <- fads_read_tsv(\"data/fads/220916/pi30v4_6.txt\") fads #> # A tibble: 413,790 × 6 #>           time  blue  green   red width spacing #>          <dbl> <dbl>  <dbl> <dbl> <dbl>   <dbl> #>  1 3647025511.     0 0.0961 0.723 0.32    0.915 #>  2 3647025516.     0 0.0958 0.763 0.37    0.665 #>  3 3647025520.     0 0.125  0.772 0.37    0.495 #>  4 3647025522.     0 0.357  0.759 0.355   0.025 #>  5 3647025526.     0 0.101  0.748 0.345   0.255 #>  6 3647025530.     0 0.0995 0.714 0.285   0.585 #>  7 3647025534.     0 0.0967 0.730 0.33    0.41  #>  8 3647025538.     0 0.0946 0.763 0.4     0.435 #>  9 3647025543.     0 0.0958 0.752 0.355   0.695 #> 10 3647025547.     0 0.0977 0.769 0.405   0.415 #> # … with 413,780 more rows fads %>%    fads_remove_outliers() %>%    ggplot(aes(x = green, y = red)) +   geom_bin2d(bins = 100, drop = T) +    scale_fill_gradientn(colours = wes_palette(\"Zissou1\", 100, type = \"continuous\")) +    theme_pretty_thesis() +    theme(legend.position = c(1, 0),         legend.justification = c(1,0),         legend.box.background = element_rect(fill = \"white\")) +    labs(x = \"Green PMT signal [V]\",        y = \"Red PMT signal [V]\",        fill = \"Droplets\") grDevices::pdf(file = \"output/plots/04_fads_green_red.pdf\", width = textwidth, height = textwidth/3, ) print(last_plot()) grDevices::dev.off() #> agg_png  #>       2"},{"path":"/articles/thesis_plots.html","id":"supplementary-information","dir":"Articles","previous_headings":"","what":"Supplementary Information","title":"Thesis Plots","text":"Voltage amplifier:","code":"d <- readr::read_csv(\"data/boexle_sorter_output.csv\", show_col_types = FALSE) p <- ggplot(d, aes(x = input_vpp, y = output_vpp)) +    geom_point(aes(color = factor(frequency)), shape = 17) +    geom_smooth(method = \"lm\", formula = \"y ~ x\", fullrange = TRUE, color = \"black\", linewidth = 0.5, alpha = 0.3) +    xlim(c(0, 12.5)) +    labs(x = \"Input signal peak-to-peak voltage [V]\",        y = \"Output signal peak-to-peak voltage [V]\") +    theme_pretty_thesis() +    theme(panel.grid.major = element_line(),         panel.grid.minor = element_line(),         legend.box.background = element_rect(fill = \"white\")) +    labs(color = \"Frequency [Hz]\") p"},{"path":"/articles/volumes.html","id":"tubing","dir":"Articles","previous_headings":"","what":"Tubing","title":"Volumes and Concentrations","text":"Volume cylinder radius \\(r\\) height \\(h\\): \\[V = \\pi r^2 h\\] Tubing options: Plot tubing volume function tubing length lengths 1 meter:  Convert flowrate unit µl/h tubing cm/h:","code":"getCylinderVolume <- function(radius, height) {   return(pi * radius^2 * height) } # everything in m radiusTygon <- 0.508e-3 / 2 radiusPTFE1 <- 0.8e-3 / 2 radiusPTFE2 <- 0.3e-3 / 2 volumes <- tibble::tibble(\"length\" = seq(1,1000)) %>%    dplyr::mutate(length = length * 1e-3) %>% # convert into mm   dplyr::mutate(v_tygon = getCylinderVolume(radiusTygon, length),                 v_ptfe_large = getCylinderVolume(radiusPTFE1, length),                 v_ptfe_small = getCylinderVolume(radiusPTFE2, length)) %>%   tidyr::pivot_longer(!length, names_to = \"type\", values_to = \"volume\") volumes #> # A tibble: 3,000 × 3 #>    length type           volume #>     <dbl> <chr>           <dbl> #>  1  0.001 v_tygon      2.03e-10 #>  2  0.001 v_ptfe_large 5.03e-10 #>  3  0.001 v_ptfe_small 7.07e-11 #>  4  0.002 v_tygon      4.05e-10 #>  5  0.002 v_ptfe_large 1.01e- 9 #>  6  0.002 v_ptfe_small 1.41e-10 #>  7  0.003 v_tygon      6.08e-10 #>  8  0.003 v_ptfe_large 1.51e- 9 #>  9  0.003 v_ptfe_small 2.12e-10 #> 10  0.004 v_tygon      8.11e-10 #> # … with 2,990 more rows  ggplot(volumes, aes(x = length, y = volume * 1e9, color = type)) +    geom_line() +    scale_colour_viridis_d(labels = c(\"PTFE 1\", \"PTFE 2\", \"Tygon\")) +    labs(x = \"Tubing length [m]\",        y = \"Tubing volume [µL]\",        color = \"Tubing type\",        title = \"PTFE and Tygon tubing volume\") +    theme_pretty() flowrates <- tibble::tibble(\"ul_h\" = seq(0, 100)) %>%    dplyr::mutate(\"Tygon\" = ul_h / (getCylinderVolume(radiusTygon, 0.01) * 1e9),                  \"PTFE 1\" = ul_h / (getCylinderVolume(radiusPTFE1, 0.01) * 1e9),                 \"PTFE 2\" = ul_h / (getCylinderVolume(radiusPTFE2, 0.01) * 1e9)) %>%    tidyr::pivot_longer(!ul_h, names_to = \"tubing_type\", values_to = \"cm_h\") ggplot(flowrates, aes(x = ul_h, y = cm_h / 60, color = tubing_type)) +    geom_line() +    scale_color_viridis_d() +    theme_pretty() +    labs(x = \"Flowrate [ul/h]\",        y = \"Tubing-length flowrate [cm/min]\",        color = \"Tubing type\",        title = \"Displacement rate in tubing [cm/min] vs. flowrate [µl/h]\")"},{"path":"/articles/volumes.html","id":"droplets","dir":"Articles","previous_headings":"","what":"Droplets","title":"Volumes and Concentrations","text":"much liquid contained droplet diameter \\(d\\)? Volume sphere: \\[V = \\frac{4}{3} \\pi r^3\\] Plot droplet volumes function diameter:  droplet sizes 40 µm:  many droplets 1 ml emulsion? Assuming close-packing equal spheres: fraction space occupied spheres \\[\\frac{\\pi}{3 \\sqrt{2}} \\approx 0.74048\\] Using packing density, can calculate volume fraction occupied spheres. Dividing known volume single droplet yields total number droplets contained given volume emulsion. Plot number droplets contained 1 ml emulsion vs. droplet diameter:  many droplets given length Tygon/PTFE tubing? Plot number close-packed spheres tubing length:  Droplet frequency: Given droplet diameter fixed emulsion flow rate, many droplets per second get?","code":"getSphereVolume <- function(radius) {   return(4/3 * pi * radius^3) } tibble::tibble(\"diameter\" = seq(10, 100) * 1e-6) %>% # 10-200 µm droplets   dplyr::mutate(\"volume\" = getSphereVolume(diameter/2)) %>%    ggplot(aes(x = diameter*1e6, y = volume * 1e15)) + # y-axis in picoliters   geom_line() +   labs(x = \"Droplet diameter [µm]\",        y = \"Droplet volume [pL]\",        title = \"Droplet volume vs. diameter\") +    theme_pretty() last_plot() +    coord_cartesian(xlim = c(10, 40), ylim = c(0, 35)) radiusDroplet <- 15e-6 # 30 micron droplets getNumberOfClosePackedSpheres <- function(radius, volume) {   volumeSingleSphere <- 4/3 * pi * radius^3   packingDensity <- pi/3/sqrt(2)   return(packingDensity * volume / volumeSingleSphere) } tibble::tibble(\"diameter\" = seq(20, 40) * 1e-6,                \"n_drops\" = getNumberOfClosePackedSpheres(diameter/2, 1e-6)) %>%    ggplot(aes(x = diameter * 1e6, y = n_drops * 1e-6)) +    geom_line() +    labs(title = \"Number of close-packed equal spheres in 1 ml\",        x = \"Sphere diameter [µm]\",        y = \"Number of spheres [million]\") +    theme_pretty() volumes %>%    dplyr::mutate(n_droplets = getNumberOfClosePackedSpheres(radiusDroplet, volume)) %>%    ggplot(aes(x = length, y = n_droplets*1e-6, color = type)) +   geom_line() +   scale_colour_viridis_d(labels = c(\"PTFE 1\", \"PTFE 2\", \"Tygon\")) +    labs(x = \"Tubing length [m]\",        y = \"Number of close-packed spheres [million]\",        color = \"Tubing type\",        title = \"Number of droplets vs. tubing length\") +    theme_pretty() tidyr::crossing(\"flowrate\" = seq(1, 100) * 1e-9 / (60*60), # convert µl/h into m^3/s                 \"diameter\" = c(25, 30, 35) * 1e-6) %>%    dplyr::mutate(\"frequency\" = 0.74* flowrate / getSphereVolume(diameter/2)) %>%    ggplot(aes(x = flowrate * (3600/1e-9), y = frequency, color = factor(diameter*1e6))) +    geom_line() +    labs(title = \"Droplet frequency vs. flowrate\",        y = \"Droplet frequency [Hz]\",        x = \"Flowrate [µl/h]\",        color = \"Droplet diameter [µm]\") +    theme_pretty() +    theme(legend.position = c(0,1),         legend.justification = c(0,1))"},{"path":"/articles/volumes.html","id":"volume-increase-due-to-picoinjection","dir":"Articles","previous_headings":"Droplets","what":"Volume increase due to picoinjection","title":"Volumes and Concentrations","text":"Described (Abate et al. 2010) injected volumes range 0.5-2 pl ~ 40 µm droplets (mentioned paper). injection volume range stepinjector (Hu et al. 2021) documented 3.5-122 pl. diameter droplet increase picoliter volumes added?  Conclusion: concentration cells need picoliter volumes injected average 1/2/5 cells per droplet encapsulated?","code":"tidyr::crossing(\"radius\" = seq(7.5, 17.5, 0.1) * 1e-6,                  \"injected\" = c(0.5, 1, 2, 5, 10) * 1e-15) %>%    dplyr::mutate(\"volume_before\" = getSphereVolume(radius),                 \"volume_after\" = volume_before + injected,                 \"radius_after\" = (3/4*volume_after/pi)^(1/3)) %>%    ggplot(aes(x = 2*radius*1e6, y = 2*radius_after*1e6, color = factor(injected * 1e15))) +    geom_hline(yintercept = 30, linetype = \"dashed\") +    geom_line() +    labs(x = \"Droplet diameter [µm]\",        y = \"Droplet diameter after injection [µm]\",        color = \"Injected volume [pl]\",        title = \"Change in droplet size after picoinjection\") +   theme_pretty() tidyr::crossing(\"injected\" = seq(1, 10), # pl                 \"lambda\" = c(1, 2, 5)) %>%    dplyr::mutate(\"concentration\" = lambda/injected*1e9) %>%    ggplot(aes(x = injected, y = concentration, color = factor(lambda))) +    geom_line() +    scale_y_continuous(sec.axis = sec_axis(trans = ~./8e8, name = \"Corresponding OD600 value\")) +    labs(x = \"Injected volume [pl]\",        y = \"Cell concentration [cfu/ml]\",        color = \"Average #cells per injection\",        title = \"Required cell concentration vs. injected volume for a given mean number of cells per injection\") +    theme_pretty() +    theme(legend.position = c(1,1),         legend.justification = c(1,1))"},{"path":"/articles/volumes.html","id":"cells","dir":"Articles","previous_headings":"","what":"Cells","title":"Volumes and Concentrations","text":"volume cell compare droplet? Approximate dimensions typical E.coli cell: diameter = 1 µm length = 2 µm volume = 1.3 µm^3 Neglecting packing, plot many E.coli cells theoretically fit one droplet:  many mCherry molecules one bacterium, mCherry concentration droplet cell lysis? motivation question following: end, want capture droplets contained phage successfully managed kill bacteria. droplet containing intact cell causes narrow signal high magnitude excitation laser, droplet whose cells lysed result broader, low-intensity signal, since volumetric concentration fluorescent protein much smaller. However, clear, whether low signal can distinguished background noise present given time.","code":"vEcoli <- 1.3e-18 tibble::tibble(\"diameter\" = seq(10, 40) * 1e-6) %>% # 10-200 µm droplets   dplyr::mutate(\"volume\" = getSphereVolume(diameter/2),                 \"n_cells\" = volume/vEcoli) %>%    ggplot(aes(x = diameter*1e6, y = n_cells)) + # y-axis in picoliters   geom_line() +   labs(x = \"Droplet diameter [µm]\",        y = \"Number of cells equivalent to droplet volume\",        title = \"Number of E.coli cells equivalent to droplet volume vs. droplet diameter\") +    theme_pretty()"},{"path":"/articles/volumes.html","id":"poisson-statistics","dir":"Articles","previous_headings":"","what":"Poisson statistics","title":"Volumes and Concentrations","text":"(Collins et al. 2015) single-cell encapsulation: number cells can approximated Gaussian distribution case single-cell analysis cells distributed randomly aqueous phase, quantity cells per droplet determined Poisson statistics probabilistically estimate proportion single cells encapsulated according Poisson distribution, applicable case average cell arrival rate known arrival individual cells occurs independently cells Poisson distribution: \\[p(k, \\lambda) = \\frac{\\lambda^k e^{-\\lambda}}{k!}\\] \\(k\\) number particles droplet \\(\\lambda\\) average number cells per droplet volume Plot Poisson distribution different \\(\\lambda\\):","code":"tidyr::crossing(\"k\" = seq(0,10),                 \"lambda\" = c(0.05, 0.25, 1, 2, 5, 20)) %>%    dplyr::mutate(\"p\" = dpois(k, lambda)) %>%    ggplot(aes(x = k, y = p)) +    geom_line(aes(color = factor(lambda)), linetype = \"dashed\") +    geom_point(aes(fill = factor(lambda)), shape = 22) +    scale_x_continuous(breaks = seq(0,10)) +    theme_pretty() +    labs(title = \"Poisson distribution for different values of lambda\",        y = \"p(k, lambda)\",        x = \"k\",        color = \"lambda\",        fill = \"lambda\")"},{"path":"/articles/volumes.html","id":"volume-inference-via-poisson-statistics","dir":"Articles","previous_headings":"Poisson statistics","what":"Volume inference via Poisson statistics","title":"Volumes and Concentrations","text":"Idea: Count many droplets injected 0/1/2/3… cells determine lambda best fits Poisson distribution data. bulk concentration injected phase known precisely, can use infer injected volume. , can derive change droplet size. Calculation example: Let cell concentration injected phase \\(c_0 = 0.5 \\cdot 10^9 \\mathrm{cfu/ml}\\). picoinjection, following droplet population recorded: Now want find parameter \\(\\hat{\\lambda}\\) best explains observed data. corresponds maximum likelihood estimate Poisson distribution simply sample mean: \\[\\hat{\\lambda}_\\mathrm{MLE} = \\frac{1}{n} \\sum_{=1}^n k_i\\] data, \\(\\hat{\\lambda}_\\mathrm{MLE} = 2.13\\) unit \\(\\mathrm{cfu/V_{injected}}\\). Using known concentration \\(c_0\\) injected phase, can now infer injected volume \\[\\mathrm {V_{inj}} = \\frac{2.13 \\; \\mathrm{cfu}}{0.5 \\cdot 10^9 \\; \\mathrm{cfu/ml}} = 4.26 \\cdot 10^{-9} \\; \\mathrm{ml} = 4.26 \\; \\mathrm{pl}\\] (Numbers example data chosen approximate picoinjection 5 pl average 2 cells encapsulated per droplet) sensitive estimate w.r.t. parameters system (.e. cell concentration \\(c_0\\) droplet counts)? Implement function performs calculation: Simulate variance measured data:  Disadvantages approach: can detect number injected cells using nyancat (.e. real time), keep parameters experiment image afterwards Nikon get initial concentration cells right order land range number injected cells allows count ","code":"counts <- tibble::tibble(\"cells_per_droplet\" = seq(0,7),                \"n_droplets\" = c(13, 26, 26, 17, 10, 5, 2, 1)) counts #> # A tibble: 8 × 2 #>   cells_per_droplet n_droplets #>               <int>      <dbl> #> 1                 0         13 #> 2                 1         26 #> 3                 2         26 #> 4                 3         17 #> 5                 4         10 #> 6                 5          5 #> 7                 6          2 #> 8                 7          1 weighted.mean(counts$cells_per_droplet, counts$n_droplets) #> [1] 2.13 infer_injected_volume <- function(poissonCounts, c0) {   lambda_mle <- stats::weighted.mean(poissonCounts[[\"cells_per_droplet\"]],                                      poissonCounts[[\"n_droplets\"]])   v_injected <- lambda_mle/c0   return(v_injected) } tibble::tibble(\"concentration\" = seq(0.4, 0.6, 0.01) * 1e9) %>%    dplyr::mutate(\"v_injected\" = infer_injected_volume(counts, concentration)) %>%    ggplot(aes(x = concentration, y = v_injected*1e9)) +    geom_vline(xintercept = 0.5e9, linetype = \"dashed\") +    geom_line() +   labs(x = \"Bulk concentration [cfu/ml]\",        y = \"Injected volume [pl]\")  +   theme_pretty()"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Fynn Withake. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Withake F (2023). picoinjector: Collection Analysis Scripts Microfluidic Picoinjector Development. R package version 0.0.0.9000.","code":"@Manual{,   title = {picoinjector: Collection of Analysis Scripts for Microfluidic Picoinjector Development},   author = {Fynn Withake},   year = {2023},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Collection of Analysis Scripts for Microfluidic Picoinjector Development","text":"can install development version picoinjector GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"fynnwi/picoinjector\")"},{"path":"/index.html","id":"content","dir":"","previous_headings":"","what":"Content","title":"Collection of Analysis Scripts for Microfluidic Picoinjector Development","text":"Calculations estimate hydraulic resistances PTFE Tygon tubing resulting flow rates: vignette(\"hydraulic_resistance\") Estimations quantify number droplets contained x cm tubing: vignette(\"droplet_volumes\") Spin curve analysis SU-8 3035 custom dilution: vignette(\"spincurves\")","code":""},{"path":"/reference/fads_format_time_minutes.html","id":null,"dir":"Reference","previous_headings":"","what":"FADS Format Time Into Minutes — fads_format_time_minutes","title":"FADS Format Time Into Minutes — fads_format_time_minutes","text":"FADS Format Time Minutes","code":""},{"path":"/reference/fads_format_time_minutes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FADS Format Time Into Minutes — fads_format_time_minutes","text":"","code":"fads_format_time_minutes(fads)"},{"path":"/reference/fads_format_time_minutes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FADS Format Time Into Minutes — fads_format_time_minutes","text":"fads TODO","code":""},{"path":"/reference/fads_format_time_minutes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FADS Format Time Into Minutes — fads_format_time_minutes","text":"TODO","code":""},{"path":"/reference/fads_format_time_seconds.html","id":null,"dir":"Reference","previous_headings":"","what":"FADS Format Time Into Seconds — fads_format_time_seconds","title":"FADS Format Time Into Seconds — fads_format_time_seconds","text":"FADS Format Time Seconds","code":""},{"path":"/reference/fads_format_time_seconds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FADS Format Time Into Seconds — fads_format_time_seconds","text":"","code":"fads_format_time_seconds(fads)"},{"path":"/reference/fads_format_time_seconds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FADS Format Time Into Seconds — fads_format_time_seconds","text":"fads TODO","code":""},{"path":"/reference/fads_format_time_seconds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FADS Format Time Into Seconds — fads_format_time_seconds","text":"TODO","code":""},{"path":"/reference/fads_generate_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Report from a FADS TSV File — fads_generate_report","title":"Generate Report from a FADS TSV File — fads_generate_report","text":"TODO make sure necessary functions imported","code":""},{"path":"/reference/fads_generate_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Report from a FADS TSV File — fads_generate_report","text":"","code":"fads_generate_report(tsvFile, bins = 100)"},{"path":"/reference/fads_generate_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Report from a FADS TSV File — fads_generate_report","text":"tsvFile FADS TSV file. bins Number bins density tile size.","code":""},{"path":"/reference/fads_generate_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Report from a FADS TSV File — fads_generate_report","text":"patchwork object","code":""},{"path":"/reference/fads_get_outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"FADS Get Outliers — fads_get_outliers","title":"FADS Get Outliers — fads_get_outliers","text":"Returns TRUE elements less Q1 - scale * IQR Q3 + scale * IQR, FALSE otherwise.","code":""},{"path":"/reference/fads_get_outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FADS Get Outliers — fads_get_outliers","text":"","code":"fads_get_outliers(numbers, scale = 5)"},{"path":"/reference/fads_get_outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FADS Get Outliers — fads_get_outliers","text":"numbers TODO scale Scale factor used calculate much datapoint can deviate bulk considered outlier.","code":""},{"path":"/reference/fads_get_outliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FADS Get Outliers — fads_get_outliers","text":"TODO","code":""},{"path":"/reference/fads_marker_opacity.html","id":null,"dir":"Reference","previous_headings":"","what":"FADS Get Marker Opacity — fads_marker_opacity","title":"FADS Get Marker Opacity — fads_marker_opacity","text":"purpose function determine suitable alpha value 0 1 scatter plots large number points become meaningful.","code":""},{"path":"/reference/fads_marker_opacity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FADS Get Marker Opacity — fads_marker_opacity","text":"","code":"fads_marker_opacity(fads)"},{"path":"/reference/fads_marker_opacity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FADS Get Marker Opacity — fads_marker_opacity","text":"fads TODO","code":""},{"path":"/reference/fads_marker_opacity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FADS Get Marker Opacity — fads_marker_opacity","text":"opacity value 0 1.","code":""},{"path":"/reference/fads_plot_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"FADS Plot Droplet Frequency — fads_plot_frequency","title":"FADS Plot Droplet Frequency — fads_plot_frequency","text":"FADS Plot Droplet Frequency","code":""},{"path":"/reference/fads_plot_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FADS Plot Droplet Frequency — fads_plot_frequency","text":"","code":"fads_plot_frequency(fads)"},{"path":"/reference/fads_plot_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FADS Plot Droplet Frequency — fads_plot_frequency","text":"fads Tibble returned fads_read_tsv().","code":""},{"path":"/reference/fads_plot_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FADS Plot Droplet Frequency — fads_plot_frequency","text":"ggplot object","code":""},{"path":"/reference/fads_plot_red_green.html","id":null,"dir":"Reference","previous_headings":"","what":"FADS Plot Red vs. Green Max PMT — fads_plot_red_green","title":"FADS Plot Red vs. Green Max PMT — fads_plot_red_green","text":"TODO plot elapsed time","code":""},{"path":"/reference/fads_plot_red_green.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FADS Plot Red vs. Green Max PMT — fads_plot_red_green","text":"","code":"fads_plot_red_green(fads, bins = 100)"},{"path":"/reference/fads_plot_red_green.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FADS Plot Red vs. Green Max PMT — fads_plot_red_green","text":"fads Tibble returned fads_read_tsv(). bins Argument passed ggplot2::geom_bin2d().","code":""},{"path":"/reference/fads_plot_red_green.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FADS Plot Red vs. Green Max PMT — fads_plot_red_green","text":"ggplot object.","code":""},{"path":"/reference/fads_plot_red_green_hex.html","id":null,"dir":"Reference","previous_headings":"","what":"FADS Plot Red vs. Green Max PMT — fads_plot_red_green_hex","title":"FADS Plot Red vs. Green Max PMT — fads_plot_red_green_hex","text":"TODO plot elapsed time","code":""},{"path":"/reference/fads_plot_red_green_hex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FADS Plot Red vs. Green Max PMT — fads_plot_red_green_hex","text":"","code":"fads_plot_red_green_hex(fads, bins = 100)"},{"path":"/reference/fads_plot_red_green_hex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FADS Plot Red vs. Green Max PMT — fads_plot_red_green_hex","text":"fads Tibble returned fads_read_tsv(). bins Argument passed ggplot2::geom_bin2d().","code":""},{"path":"/reference/fads_plot_red_green_hex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FADS Plot Red vs. Green Max PMT — fads_plot_red_green_hex","text":"ggplot object.","code":""},{"path":"/reference/fads_plot_red_green_hex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FADS Plot Red vs. Green Max PMT — fads_plot_red_green_hex","text":"copy fads_plot_red_green(), just hexagonal tiles.","code":""},{"path":"/reference/fads_plot_signal_time.html","id":null,"dir":"Reference","previous_headings":"","what":"FADS Plot Width vs. Time — fads_plot_signal_time","title":"FADS Plot Width vs. Time — fads_plot_signal_time","text":"FADS Plot Width vs. Time","code":""},{"path":"/reference/fads_plot_signal_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FADS Plot Width vs. Time — fads_plot_signal_time","text":"","code":"fads_plot_signal_time(fads)"},{"path":"/reference/fads_plot_signal_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FADS Plot Width vs. Time — fads_plot_signal_time","text":"fads Tibble returned fads_read_tsv().","code":""},{"path":"/reference/fads_plot_signal_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FADS Plot Width vs. Time — fads_plot_signal_time","text":"ggplot object.","code":""},{"path":"/reference/fads_plot_width.html","id":null,"dir":"Reference","previous_headings":"","what":"FADS Plot With against Red/Green Signal — fads_plot_width","title":"FADS Plot With against Red/Green Signal — fads_plot_width","text":"TODO plot elapsed time","code":""},{"path":"/reference/fads_plot_width.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FADS Plot With against Red/Green Signal — fads_plot_width","text":"","code":"fads_plot_width(fads, y = \"red\", bins = 100)"},{"path":"/reference/fads_plot_width.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FADS Plot With against Red/Green Signal — fads_plot_width","text":"fads Tibble returned fads_read_tsv(). y Name variable plot y-axis. bins Argument passed ggplot2::geom_bin2d().","code":""},{"path":"/reference/fads_plot_width.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FADS Plot With against Red/Green Signal — fads_plot_width","text":"ggplot object.","code":""},{"path":"/reference/fads_plot_width_time.html","id":null,"dir":"Reference","previous_headings":"","what":"FADS Plot Width vs. Time — fads_plot_width_time","title":"FADS Plot Width vs. Time — fads_plot_width_time","text":"FADS Plot Width vs. Time","code":""},{"path":"/reference/fads_plot_width_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FADS Plot Width vs. Time — fads_plot_width_time","text":"","code":"fads_plot_width_time(fads)"},{"path":"/reference/fads_plot_width_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FADS Plot Width vs. Time — fads_plot_width_time","text":"fads Tibble returned fads_read_tsv().","code":""},{"path":"/reference/fads_plot_width_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FADS Plot Width vs. Time — fads_plot_width_time","text":"ggplot object.","code":""},{"path":"/reference/fads_read_all.html","id":null,"dir":"Reference","previous_headings":"","what":"FADS Read All — fads_read_all","title":"FADS Read All — fads_read_all","text":"Combines available data one tibble.","code":""},{"path":"/reference/fads_read_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FADS Read All — fads_read_all","text":"","code":"fads_read_all(dir, suffix)"},{"path":"/reference/fads_read_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FADS Read All — fads_read_all","text":"dir Directory containing FADS TSV files. suffix Suffix identifiying FADS TSV files.","code":""},{"path":"/reference/fads_read_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FADS Read All — fads_read_all","text":"tibble.","code":""},{"path":"/reference/fads_read_tsv.html","id":null,"dir":"Reference","previous_headings":"","what":"FADS Read TSV File — fads_read_tsv","title":"FADS Read TSV File — fads_read_tsv","text":"FADS Read TSV File","code":""},{"path":"/reference/fads_read_tsv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FADS Read TSV File — fads_read_tsv","text":"","code":"fads_read_tsv(fadsData)"},{"path":"/reference/fads_read_tsv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FADS Read TSV File — fads_read_tsv","text":"fadsData Path FADS CSV file.","code":""},{"path":"/reference/fads_read_tsv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FADS Read TSV File — fads_read_tsv","text":"Tibble containing data droplets identified sorter.","code":""},{"path":"/reference/fads_remove_outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"FADS Remove Outliers — fads_remove_outliers","title":"FADS Remove Outliers — fads_remove_outliers","text":"Removes rows contain green red outliers.","code":""},{"path":"/reference/fads_remove_outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FADS Remove Outliers — fads_remove_outliers","text":"","code":"fads_remove_outliers(fads)"},{"path":"/reference/fads_remove_outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FADS Remove Outliers — fads_remove_outliers","text":"fads TODO.","code":""},{"path":"/reference/fads_remove_outliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FADS Remove Outliers — fads_remove_outliers","text":"TODO","code":""},{"path":"/reference/fads_reports_for_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a FADS Report PDF For Every File in Folder — fads_reports_for_all","title":"Generate a FADS Report PDF For Every File in Folder — fads_reports_for_all","text":"function exploits first line every FADS TSV file : \"# iiiiiiiiiiiiii0000000\"","code":""},{"path":"/reference/fads_reports_for_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a FADS Report PDF For Every File in Folder — fads_reports_for_all","text":"","code":"fads_reports_for_all(directory, outputDir, bins = 75)"},{"path":"/reference/fads_reports_for_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a FADS Report PDF For Every File in Folder — fads_reports_for_all","text":"directory directory. outputDir Destination generated PDF files. bins Number bins.","code":""},{"path":"/reference/logfile_align_pressure.html","id":null,"dir":"Reference","previous_headings":"","what":"Align Pressure to Syringe Log — logfile_align_pressure","title":"Align Pressure to Syringe Log — logfile_align_pressure","text":"Align Pressure Syringe Log","code":""},{"path":"/reference/logfile_align_pressure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align Pressure to Syringe Log — logfile_align_pressure","text":"","code":"logfile_align_pressure(pressureLog, syringeLog, tPressure, tSyringe)"},{"path":"/reference/logfile_align_pressure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align Pressure to Syringe Log — logfile_align_pressure","text":"pressureLog TODO syringeLog TODO tPressure seconds. tSyringe seconds.","code":""},{"path":"/reference/logfile_align_pressure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align Pressure to Syringe Log — logfile_align_pressure","text":"TODO","code":""},{"path":"/reference/logfile_plot_pressure.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Pressure Log — logfile_plot_pressure","title":"Plot Pressure Log — logfile_plot_pressure","text":"Plot Pressure Log","code":""},{"path":"/reference/logfile_plot_pressure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Pressure Log — logfile_plot_pressure","text":"","code":"logfile_plot_pressure(pressureLog)"},{"path":"/reference/logfile_plot_pressure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Pressure Log — logfile_plot_pressure","text":"pressureLog Pressure log.","code":""},{"path":"/reference/logfile_plot_pressure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Pressure Log — logfile_plot_pressure","text":"ggplot object.","code":""},{"path":"/reference/logfile_plot_syringepump.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Syringe Pump Log — logfile_plot_syringepump","title":"Plot Syringe Pump Log — logfile_plot_syringepump","text":"Plot Syringe Pump Log","code":""},{"path":"/reference/logfile_plot_syringepump.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Syringe Pump Log — logfile_plot_syringepump","text":"","code":"logfile_plot_syringepump(syringepumpLog)"},{"path":"/reference/logfile_plot_syringepump.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Syringe Pump Log — logfile_plot_syringepump","text":"syringepumpLog Syringe pump log.","code":""},{"path":"/reference/logfile_plot_syringepump.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Syringe Pump Log — logfile_plot_syringepump","text":"ggplot object.","code":""},{"path":"/reference/logfile_read_pressure.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Elveflow OB1 Pressure Controller Log File — logfile_read_pressure","title":"Read Elveflow OB1 Pressure Controller Log File — logfile_read_pressure","text":"Read Elveflow OB1 Pressure Controller Log File","code":""},{"path":"/reference/logfile_read_pressure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Elveflow OB1 Pressure Controller Log File — logfile_read_pressure","text":"","code":"logfile_read_pressure(filename)"},{"path":"/reference/logfile_read_pressure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Elveflow OB1 Pressure Controller Log File — logfile_read_pressure","text":"filename Path log file.","code":""},{"path":"/reference/logfile_read_pressure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Elveflow OB1 Pressure Controller Log File — logfile_read_pressure","text":"Channel pressures long format.","code":""},{"path":"/reference/logfile_read_syringepump.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Cetoni Syringe Pump Log File — logfile_read_syringepump","title":"Read Cetoni Syringe Pump Log File — logfile_read_syringepump","text":"Read Cetoni Syringe Pump Log File","code":""},{"path":"/reference/logfile_read_syringepump.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Cetoni Syringe Pump Log File — logfile_read_syringepump","text":"","code":"logfile_read_syringepump(filename)"},{"path":"/reference/logfile_read_syringepump.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Cetoni Syringe Pump Log File — logfile_read_syringepump","text":"filename Path log file.","code":""},{"path":"/reference/logfile_read_syringepump.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Cetoni Syringe Pump Log File — logfile_read_syringepump","text":"Syringe flowrates long format.","code":""},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/plot_heightprofile.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Height Profile — plot_heightprofile","title":"Plot Height Profile — plot_heightprofile","text":"Plot Height Profile","code":""},{"path":"/reference/plot_heightprofile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Height Profile — plot_heightprofile","text":"","code":"plot_heightprofile(heights)"},{"path":"/reference/plot_heightprofile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Height Profile — plot_heightprofile","text":"heights Dataframe containing columnes 'position' 'height'","code":""},{"path":"/reference/plot_heightprofile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Height Profile — plot_heightprofile","text":"ggplot object","code":""},{"path":"/reference/plot_heightprofile_bywafer.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Height Profiles By Wafer — plot_heightprofile_bywafer","title":"Plot Height Profiles By Wafer — plot_heightprofile_bywafer","text":"Plot Height Profiles Wafer","code":""},{"path":"/reference/plot_heightprofile_bywafer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Height Profiles By Wafer — plot_heightprofile_bywafer","text":"","code":"plot_heightprofile_bywafer(heights)"},{"path":"/reference/plot_heightprofile_bywafer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Height Profiles By Wafer — plot_heightprofile_bywafer","text":"heights TODO","code":""},{"path":"/reference/plot_heightprofile_bywafer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Height Profiles By Wafer — plot_heightprofile_bywafer","text":"ggplot object.","code":""},{"path":"/reference/theme_fynn.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom ggplot2 Theme — theme_fynn","title":"Custom ggplot2 Theme — theme_fynn","text":"Custom ggplot2 Theme","code":""},{"path":"/reference/theme_fynn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom ggplot2 Theme — theme_fynn","text":"","code":"theme_fynn()"},{"path":"/reference/theme_pretty.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom ggplot2 Theme — theme_pretty","title":"Custom ggplot2 Theme — theme_pretty","text":"Custom ggplot2 Theme","code":""},{"path":"/reference/theme_pretty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom ggplot2 Theme — theme_pretty","text":"","code":"theme_pretty()"},{"path":"/reference/theme_pretty_custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom ggplot2 Theme For Package Figures — theme_pretty_custom","title":"Custom ggplot2 Theme For Package Figures — theme_pretty_custom","text":"Custom ggplot2 Theme Package Figures","code":""},{"path":"/reference/theme_pretty_custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom ggplot2 Theme For Package Figures — theme_pretty_custom","text":"","code":"theme_pretty_custom()"},{"path":"/reference/theme_pretty_custom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Custom ggplot2 Theme For Package Figures — theme_pretty_custom","text":"patchwork object.","code":""},{"path":"/reference/theme_pretty_thesis.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom ggplot2 Theme For Thesis Figures — theme_pretty_thesis","title":"Custom ggplot2 Theme For Thesis Figures — theme_pretty_thesis","text":"Custom ggplot2 Theme Thesis Figures","code":""},{"path":"/reference/theme_pretty_thesis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom ggplot2 Theme For Thesis Figures — theme_pretty_thesis","text":"","code":"theme_pretty_thesis()"}]
