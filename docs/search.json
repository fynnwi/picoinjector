[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/droplet_volumes.html","id":"tubing","dir":"Articles","previous_headings":"","what":"Tubing","title":"Volume Estimates","text":"Volume cylinder radius \\(r\\) height \\(h\\): \\[V = \\pi r^2 h\\] Tubing options Plot tubing volume function tubing length lengths 1 meter:  Convert flowrate unit µl/h tubing cm/h:","code":"getCylinderVolume <- function(radius, height) {   return(pi * radius^2 * height) } # everything in m radiusTygon <- 0.508e-3 / 2 radiusPTFE <- 0.8e-3 / 2 volumes <- tibble::tibble(\"length\" = seq(1,1000)) %>%    dplyr::mutate(length = length * 1e-3) %>% # convert into mm   dplyr::mutate(v_tygon = getCylinderVolume(radiusTygon, length),                 v_ptfe = getCylinderVolume(radiusPTFE, length)) %>%   tidyr::pivot_longer(c(v_tygon, v_ptfe), names_to = \"type\", values_to = \"volume\") volumes #> # A tibble: 2,000 × 3 #>    length type      volume #>     <dbl> <chr>      <dbl> #>  1  0.001 v_tygon 2.03e-10 #>  2  0.001 v_ptfe  5.03e-10 #>  3  0.002 v_tygon 4.05e-10 #>  4  0.002 v_ptfe  1.01e- 9 #>  5  0.003 v_tygon 6.08e-10 #>  6  0.003 v_ptfe  1.51e- 9 #>  7  0.004 v_tygon 8.11e-10 #>  8  0.004 v_ptfe  2.01e- 9 #>  9  0.005 v_tygon 1.01e- 9 #> 10  0.005 v_ptfe  2.51e- 9 #> # … with 1,990 more rows  ggplot(volumes, aes(x = length, y = volume * 1e9, color = type)) +    geom_line() +    scale_colour_viridis_d(labels = c(\"PTFE\", \"Tygon\")) +    labs(x = \"Tubing length [m]\",        y = \"Tubing volume [µL]\",        color = \"Tubing type\") +    theme_pretty() flowrates <- tibble::tibble(\"ul_h\" = seq(0, 100)) %>%    dplyr::mutate(\"Tygon\" = ul_h / (getCylinderVolume(radiusTygon, 0.01) * 1e9),                  \"PTFE\" = ul_h / (getCylinderVolume(radiusPTFE, 0.01) * 1e9)) %>%    tidyr::pivot_longer(!ul_h, names_to = \"tubing_type\", values_to = \"cm_h\") ggplot(flowrates, aes(x = ul_h, y = cm_h, color = tubing_type)) +    geom_line() +    scale_color_viridis_d() +    theme_pretty() +    labs(x = \"Flowrate [ul/h]\",        y = \"Tubing-length flowrate [cm/h]\",        color = \"Tubing type\")"},{"path":"/articles/droplet_volumes.html","id":"droplets","dir":"Articles","previous_headings":"","what":"Droplets","title":"Volume Estimates","text":"much liquid contained droplet diameter \\(d\\)? Volume sphere: \\[V = \\frac{4}{3} \\pi r^3\\] Plot droplet volumes function diameter:  droplet sizes 40 µm:  many droplets x mm Tygon/PTFE tubing? Assuming close-packing equal spheres: fraction space occupied spheres \\[\\frac{\\pi}{3 \\sqrt{2}} \\approx 0.74048\\] Using packing density, can calculate volume occupied spheres given tubing length. Dividing known volume single droplet yields total number droplets contained x meters tubing, assuming close-packing equal spheres. Plot number close-packed spheres tubing length:","code":"getSphereVolume <- function(radius) {   return(4/3 * pi * radius^3) } tibble::tibble(\"diameter\" = seq(10, 100) * 1e-6) %>% # 10-200 µm droplets   dplyr::mutate(\"volume\" = getSphereVolume(diameter/2)) %>%    ggplot(aes(x = diameter*1e6, y = volume * 1e15)) + # y-axis in picoliters   geom_line() +   labs(x = \"Droplet diameter [µm]\",        y = \"Droplet volume [pL]\") +    theme_pretty() last_plot() +    coord_cartesian(xlim = c(10, 40), ylim = c(0, 35)) radiusDroplet <- 15e-6 # 30 micron droplets getNumberOfClosePackedSpheres <- function(radius, volume) {   volumeSingleSphere <- 4/3 * pi * radius^3   packingDensity <- pi/3/sqrt(2)   return(packingDensity * volume / volumeSingleSphere) } volumes %>%    dplyr::mutate(n_droplets = getNumberOfClosePackedSpheres(radiusDroplet, volume)) %>%    ggplot(aes(x = length, y = n_droplets*1e-6, color = type)) +   geom_line() +   scale_colour_viridis_d(labels = c(\"PTFE\", \"Tygon\")) +    labs(x = \"Tubing length [m]\",        y = \"Number of close-packed spheres [million]\",        color = \"Tubing type\") +    theme_pretty()"},{"path":"/articles/electrical_engineering.html","id":"voltage-amplifier-output-measurement","dir":"Articles","previous_headings":"","what":"Voltage amplifier output measurement","title":"Electrical Engineering","text":"Read data: Plot:  seems like variables frequency channel contribute significantly output voltage, therefore just fitting single line data points assuming linear dependency “output voltage ~ input voltage”.  Prepare plot can printed A5:","code":"library(picoinjector) library(readr) library(dplyr) library(ggplot2) d <- read_csv(\"data/boexle_sorter_output.csv\", show_col_types = FALSE) d #> # A tibble: 40 × 5 #>    channel frequency input_vpp output_vpp output_dc_average #>      <dbl>     <dbl>     <dbl>      <dbl>             <dbl> #>  1       2        50       2.5       130.             -0.13 #>  2       2        50       5         260.             -0.08 #>  3       2        50       7.5       389.              0.21 #>  4       2        50      10         518.              0.33 #>  5       2        50      12.5       646.              0.35 #>  6       2       500       2.5       130.             -0.22 #>  7       2       500       5         259.             -0.18 #>  8       2       500       7.5       389.              0.12 #>  9       2       500      10         518.              0.23 #> 10       2       500      12.5       646.              0.21 #> # … with 30 more rows ggplot(d, aes(x = input_vpp, y = output_vpp, color = factor(channel))) +    geom_point(shape = 23) +    geom_smooth(method = \"lm\", formula = \"y ~ x\") +    theme_pretty() p <- ggplot(d, aes(x = input_vpp, y = output_vpp)) +    geom_point(shape = 23) +    geom_smooth(method = \"lm\", formula = \"y ~ x\", fullrange = TRUE, color = \"black\", size = 1) +    xlim(c(0, 12.5)) +    labs(title = '\"boexle sorter\" output voltage as function of input voltage',        x = \"Input voltage peak-to-peak\",        y = \"Output voltage peak-to-peak\") +    theme_pretty() p p +    scale_y_continuous(breaks = seq(0, 700, 100), minor_breaks = seq(0, 700, 25)) +    scale_x_continuous(breaks = seq(0, 12, 2), minor_breaks = seq(0, 13), limits = c(0, 13))"},{"path":"/articles/hydraulic_resistance.html","id":"straight-circular-channel","dir":"Articles","previous_headings":"","what":"Straight circular channel","title":"Hydraulic resistance","text":"Hydraulic analogy Ohm’s law: \\[\\Delta P = R_h Q\\] \\(R_h\\) hydraulic resistance. (straight) channel circular cross-section, hydraulic resistance defined \\(R_h = \\frac{8 \\mu L}{\\pi r^4}\\) \\(\\mu\\) dynamic viscosity, \\(L\\) channel length, \\(r\\) channel radius (Bruus 2008). water using \\(\\mu = 8.9 \\cdot 10^{-4} \\; \\mathrm{Pa \\cdot s}\\). Plot hydraulic resistance tubing length:  Plot flow rate resulting pressure drop 1 Pa function tubing length:","code":"muWater <- 8.9e-4 radiusTygon <- 0.508e-3 /2 radiusPTFE <- 0.8e-3 /2  getHydraulicResistance <- function(mu, length, radius) {   return(8 * mu * length / pi / radius^4) } resistance <- tibble::tibble(\"length\" = seq(1,1000) * 1e-3, # unit: meters                \"tygon\" = getHydraulicResistance(muWater, length, radiusTygon),                \"ptfe\" = getHydraulicResistance(muWater, length, radiusPTFE)) %>%    tidyr::pivot_longer(!length, names_to = \"type\", values_to = \"r_hydraulic\") resistance #> # A tibble: 2,000 × 3 #>    length type  r_hydraulic #>     <dbl> <chr>       <dbl> #>  1  0.001 tygon  544496703. #>  2  0.001 ptfe    88529937. #>  3  0.002 tygon 1088993406. #>  4  0.002 ptfe   177059874. #>  5  0.003 tygon 1633490109. #>  6  0.003 ptfe   265589811. #>  7  0.004 tygon 2177986812. #>  8  0.004 ptfe   354119748. #>  9  0.005 tygon 2722483515. #> 10  0.005 ptfe   442649685. #> # … with 1,990 more rows  ggplot(resistance, aes(x = length*1e2, y = r_hydraulic*1e-11, color = type)) +    geom_line() +    scale_color_viridis_d(labels = c(\"PTFE\", \"Tygon\")) +    labs(x = \"Tubing length [cm]\",        y = \"Hydraulic resistance [10¹¹ Pa s m⁻³]\",        color = \"Tubing type\") +    theme_pretty() resistance %>%    dplyr::mutate(\"q\" = 1 / r_hydraulic) %>%   dplyr::filter(length >= 0.05) %>% # ignore tubing lengths < 5cm   ggplot(aes(x = length*1e2, y = q * 1e9, color = type)) + # convert m^3/s into uL/s   geom_line() +    scale_color_viridis_d(labels = c(\"PTFE\", \"Tygon\")) +    labs(x = \"Tubing length [cm]\",        y = \"Flow rate at 1 Pa [uL/s]\",        color = \"Tubing type\") +    theme_pretty()"},{"path":"/articles/hydraulic_resistance.html","id":"straight-rectangular-channel","dir":"Articles","previous_headings":"","what":"Straight rectangular channel","title":"Hydraulic resistance","text":"TODO","code":""},{"path":"/articles/hydraulic_resistance.html","id":"networks","dir":"Articles","previous_headings":"","what":"Networks","title":"Hydraulic resistance","text":"TODO","code":""},{"path":[]},{"path":"/articles/logfiles.html","id":"syringe-pump","dir":"Articles","previous_headings":"","what":"syringe pump","title":"Log Files","text":"Cetoni syringe pump log file can loaded using convenience function logfile_read_syringepump. reads CSV file formats columns little bit. (function works particular configuration log file Cetoni Elements software.) can seen every row contains absolute time stamp allow us associate flowrate images data acquired microscope. shown later, pressure controller log file contain absolute timestamps, just column elapsed time. However, aligning flowrate pressure profiles, absolute time stamp can also inferred pressure log. end, one include alignment mark experiment, e.g. setting , pressure syringe pump specific value exact time. inspecting resulting profiles, one can identify alignment mark shift pressure profile alignment marks conincide time. overview graph syringe pump flowrate can plotted using logfile_plot_syringepump.  , alignment mark end experiment, around minute 81, flowrate channel 2 pressure channel 2 set zero. Zoom x-axis find precise time:  Investigate logfile rows order find exact time q2 set zero:","code":"syringe <- logfile_read_syringepump(\"data/logfiles/syringe_pump_log_20220805_150634.csv\") syringe #> # A tibble: 149,607 × 4 #>    elapsed_time timestamp               channel flowrate #>           <dbl> <dttm>                  <chr>      <dbl> #>  1          0   2022-08-05 15:06:34.569 q1            10 #>  2          0   2022-08-05 15:06:34.569 q2            10 #>  3          0   2022-08-05 15:06:34.569 q3             0 #>  4          0.1 2022-08-05 15:06:34.669 q1            10 #>  5          0.1 2022-08-05 15:06:34.669 q2            10 #>  6          0.1 2022-08-05 15:06:34.669 q3             0 #>  7          0.2 2022-08-05 15:06:34.769 q1            10 #>  8          0.2 2022-08-05 15:06:34.769 q2            10 #>  9          0.2 2022-08-05 15:06:34.769 q3             0 #> 10          0.3 2022-08-05 15:06:34.868 q1            10 #> # … with 149,597 more rows logfile_plot_syringepump(syringe) logfile_plot_syringepump(syringe) +   xlim(c(81.5, 82)) #> Warning: Removed 148704 row(s) containing missing values (geom_path). syringe %>%    filter(channel == \"q2\",          elapsed_time > 4904 & elapsed_time < 4905) #> # A tibble: 9 × 4 #>   elapsed_time timestamp               channel flowrate #>          <dbl> <dttm>                  <chr>      <dbl> #> 1        4904. 2022-08-05 16:28:17.611 q2           300 #> 2        4904. 2022-08-05 16:28:17.711 q2           300 #> 3        4904. 2022-08-05 16:28:17.812 q2           300 #> 4        4904. 2022-08-05 16:28:17.911 q2           300 #> 5        4904. 2022-08-05 16:28:18.012 q2           300 #> 6        4905. 2022-08-05 16:28:18.111 q2             0 #> 7        4905. 2022-08-05 16:28:18.211 q2             0 #> 8        4905. 2022-08-05 16:28:18.312 q2             0 #> 9        4905. 2022-08-05 16:28:18.411 q2             0"},{"path":"/articles/logfiles.html","id":"pressure-controller","dir":"Articles","previous_headings":"","what":"pressure controller","title":"Log Files","text":"drawback pressure controller log files , system time stored. Therefore, need align pressure profile syringe pump profile order get information.  Find time p2 set zero:","code":"pressure <- logfile_read_pressure(\"data/logfiles/pressure_log.txt\") pressure #> # A tibble: 394,856 × 4 #>    elapsed_time channel value    mbar #>           <dbl> <chr>   <chr>   <dbl> #>  1          0   p1      target  0     #>  2          0   p1      read    0.612 #>  3          0   p2      target 50     #>  4          0   p2      read   50.0   #>  5          0   p3      target  0     #>  6          0   p3      read    0.970 #>  7          0   p4      target  0     #>  8          0   p4      read    0.833 #>  9          0.1 p1      target  0     #> 10          0.1 p1      read    0.605 #> # … with 394,846 more rows logfile_plot_pressure(pressure) pressure %>%    filter(channel == \"p2\",          value == \"target\",          elapsed_time > 4861.5 & elapsed_time < 4862.5) #> # A tibble: 9 × 4 #>   elapsed_time channel value   mbar #>          <dbl> <chr>   <chr>  <dbl> #> 1        4862. p2      target   554 #> 2        4862. p2      target   554 #> 3        4862. p2      target   554 #> 4        4862. p2      target   554 #> 5        4862  p2      target   554 #> 6        4862. p2      target     0 #> 7        4862. p2      target     0 #> 8        4862. p2      target     0 #> 9        4862. p2      target     0"},{"path":"/articles/logfiles.html","id":"align-profiles","dir":"Articles","previous_headings":"","what":"align profiles","title":"Log Files","text":"times pressure syringe pump logs aligned? Align pressure log syringe pump log:","code":"tPressure <- 4862.1 tSyringe <- 4904.6 pressureAligned <- logfile_align_pressure(pressure, syringe, tPressure, tSyringe) pressureAligned #> # A tibble: 394,856 × 5 #>    elapsed_time timestamp               channel value    mbar #>           <dbl> <dttm>                  <chr>   <chr>   <dbl> #>  1         42.5 2022-08-05 15:07:17.069 p1      target  0     #>  2         42.5 2022-08-05 15:07:17.069 p1      read    0.612 #>  3         42.5 2022-08-05 15:07:17.069 p2      target 50     #>  4         42.5 2022-08-05 15:07:17.069 p2      read   50.0   #>  5         42.5 2022-08-05 15:07:17.069 p3      target  0     #>  6         42.5 2022-08-05 15:07:17.069 p3      read    0.970 #>  7         42.5 2022-08-05 15:07:17.069 p4      target  0     #>  8         42.5 2022-08-05 15:07:17.069 p4      read    0.833 #>  9         42.6 2022-08-05 15:07:17.168 p1      target  0     #> 10         42.6 2022-08-05 15:07:17.168 p1      read    0.605 #> # … with 394,846 more rows"},{"path":"/articles/logfiles.html","id":"plot","dir":"Articles","previous_headings":"","what":"plot","title":"Log Files","text":"Remove unused channels: Merge pressure syringe dataframes:","code":"syringe <- syringe %>%    dplyr::filter(channel != \"q3\") pressureAligned <- pressureAligned %>%    dplyr::filter(channel == \"p2\") # find out by how much the second y-axis has to be scaled: r <- max(syringe$flowrate) / max(pressureAligned$mbar) df1 <- syringe %>%    dplyr::rename(value = flowrate) %>%    dplyr::mutate(type = \"syringe pump\")  df2 <- pressureAligned %>%    dplyr::filter(value == \"target\") %>%    dplyr::select(!value) %>%    dplyr::rename(value = mbar) %>%    dplyr::mutate(type = \"pressure controller\")  # scale pressure df2 <- df2 %>%    dplyr::mutate(value = value * r)   df <- dplyr::bind_rows(df1, df2) ggplot(df, aes(x = elapsed_time / 60, y  = value, color = channel, linetype = type)) +    geom_line() +    scale_y_continuous(sec.axis = sec_axis(trans = ~./r, name = \"Pressure [mbar]\")) +    theme_pretty() +    labs(y = \"Flowrate [ul/h]\",        x = \"Elapsed time [min]\",        linetype = \"Instrument\",        color = \"Channel\")"},{"path":"/articles/spincurves.html","id":"introduction","dir":"Articles","previous_headings":"","what":"introduction","title":"SU-8 3035 Spincurve Analysis","text":"microfluidic chips, channel heights range 20-30 um desired. obtain heights photolithography process, photoresist suitable viscosity required. spin curves SU-8 3000 series (“SU-8 3000 Microstructure Fabrication  Kayaku Advanced Materials. Kayaku Advanced Materials, Inc.” n.d.). seems like SU-8 3035 can yield thicknesses desired range (extrapolating higher RPMs, experience 6000 RPM 30 um thickness can achieved SU-8 3050). Therefore, 115.2 g SU-8 3050 mixed 1.42 g thinner solution, order obtain custom dilution mimics behaviour SU-8 3035. following, SU-8 3035 refers custom dilution. preparation SU-8 3035, spin curve analysis conducted characterize relation spin speed film thickness custom photoresist. end, cross pattern (see image) exposed cleaned re-used silicon wafers, spin-coating SU-8 3035 3000, 4000, 5000 RPM, respectively. RPM, three chips prepared: two chips using spin duration 30s (duplicate measurements), one chip using spin duration 60 s. Therefore, total, nine wafers prepared.  photolithography, resulting height profiles measured using Dektak profilometer. Unfortunately, measuring long distances machine, measurements drifting away reference level quite significantly, necessitates correction data evalutation. Therefore, cross structure exposed wafer includes repeated gaps order pick zero-level along entire wafer. wafer ids corresponding certain combination spin time spin speed: wafer, four traces measured: top--bottom, left--right, bottom--top, right--left (see figure). results duplicate measurements structures. vignette, post-processing drift correction Dektak data carried . includes: reading CSV files, recognition reference level segments, drift correction, averaging duplicate measurements, interpolation height profiles gaps structure.","code":"library(picoinjector) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(tibble) library(readr) library(stringr) library(ggplot2) # library(tidyr)"},{"path":"/articles/spincurves.html","id":"data-loading","dir":"Articles","previous_headings":"","what":"data loading","title":"SU-8 3035 Spincurve Analysis","text":"Get file names: Read csv files concatenate single tibble dataframe: Add information spin speed duration: raw data looks like :","code":"files <- list.files(\"data/spincurve_csv/\", full.names = TRUE) head(files) #> [1] \"data/spincurve_csv//00_job9945_eastwest.csv\"   #> [2] \"data/spincurve_csv//01_job9945_northsouth.csv\" #> [3] \"data/spincurve_csv//01_job9945_westeast.csv\"   #> [4] \"data/spincurve_csv//02_job9946_southnorth.csv\" #> [5] \"data/spincurve_csv//03_job9945_southnorth.csv\" #> [6] \"data/spincurve_csv//03_job9950_northsouth.csv\" results <- tibble() for (f in files) {   d <- read_csv(f, skip = 19, show_col_types = FALSE, col_names = c(\"position\", \"height\")) %>%      select(position, height) %>%      mutate(id = basename(f)) # add the wafer id   results <- bind_rows(results, d) } results #> # A tibble: 2,815,001 × 3 #>    position height id                      #>       <dbl>  <dbl> <chr>                   #>  1      0     1.85 00_job9945_eastwest.csv #>  2      0.5   1.22 00_job9945_eastwest.csv #>  3      1     0.59 00_job9945_eastwest.csv #>  4      1.5   0    00_job9945_eastwest.csv #>  5      2    -0.51 00_job9945_eastwest.csv #>  6      2.5  -0.95 00_job9945_eastwest.csv #>  7      3    -1.32 00_job9945_eastwest.csv #>  8      3.5  -1.63 00_job9945_eastwest.csv #>  9      4    -1.88 00_job9945_eastwest.csv #> 10      4.5  -2.08 00_job9945_eastwest.csv #> # … with 2,814,991 more rows # table relating wafer id with RPM rpm <- c(job9945 = 3000, job9946 = 3000, job9947 = 4000, job9948 = 4000,          job9949 = 5000, job9950 = 5000, job10053 = 4000, job10054 = 5000, job10055 = 3000)  # table relating wafer id with seconds at max RPM spinTime <- c(job9945 = 30, job9946 = 30, job9947 = 30, job9948 = 30,          job9949 = 30, job9950 = 30, job10053 = 60, job10054 = 60, job10055 = 60)  results <- results %>%    mutate(wafer = str_extract(id, \"job\\\\d+\"),          direction = str_extract(id, \"[a-z]+\\\\.\") %>%             str_remove(\"\\\\.\"),          orientation = case_when(direction %in% c(\"eastwest\", \"westeast\") ~ \"horizontal\",                                  TRUE ~ \"vertical\"),          rpm = rpm[wafer],          spintime = spinTime[wafer]) %>%    # order rows by wafer, direction and position   group_by(rpm, spintime, direction) %>%    arrange(rpm, spintime, .by_group = TRUE) %>%    ungroup() results #> # A tibble: 2,815,001 × 8 #>    position height id                 wafer direction orientation   rpm spintime #>       <dbl>  <dbl> <chr>              <chr> <chr>     <chr>       <dbl>    <dbl> #>  1      0     1.85 00_job9945_eastwe… job9… eastwest  horizontal   3000       30 #>  2      0.5   1.22 00_job9945_eastwe… job9… eastwest  horizontal   3000       30 #>  3      1     0.59 00_job9945_eastwe… job9… eastwest  horizontal   3000       30 #>  4      1.5   0    00_job9945_eastwe… job9… eastwest  horizontal   3000       30 #>  5      2    -0.51 00_job9945_eastwe… job9… eastwest  horizontal   3000       30 #>  6      2.5  -0.95 00_job9945_eastwe… job9… eastwest  horizontal   3000       30 #>  7      3    -1.32 00_job9945_eastwe… job9… eastwest  horizontal   3000       30 #>  8      3.5  -1.63 00_job9945_eastwe… job9… eastwest  horizontal   3000       30 #>  9      4    -1.88 00_job9945_eastwe… job9… eastwest  horizontal   3000       30 #> 10      4.5  -2.08 00_job9945_eastwe… job9… eastwest  horizontal   3000       30 #> # … with 2,814,991 more rows profile <- results %>%    # filter for single trace   filter(id == \"00_job9945_eastwest.csv\")  plot_heightprofile(profile)"},{"path":"/articles/spincurves.html","id":"baseline-correction","dir":"Articles","previous_headings":"","what":"baseline correction","title":"SU-8 3035 Spincurve Analysis","text":"Now use geometrical information design determine peaks valleys trace. First, find positions (x coordinate) leftmost rightmost structure using slope graph, rescale everything spans known width 40.5 mm written wafer. rescaling necessary case trace perfectly aligned structure, .e. slightly diagonal therefore little bit longer.  find x coordinate first structure begins, calculate first derivative height profile (lagged differences) order identify regions large slope. first derivative graph looks like :  lag parameter defines sliding window size used difference calculation can used smooth resulting derivative plot. remainder analysis, use lag = 10. function finds index first edge height profile, correspond edge first structure wafer (left--right). x coordinate derivative first exceeds give threshold minSlope identified edge. analysis using minSlope = 500. Now defined function can used determine start end coordinate profile. Using information, total length profile can rescaled cover 40.5 mm known initial AutoCAD design. function detects beginning end height profile rescales corresponding lateral position rescaled profile looks like . Note beginning end truncated, compared plot trace shown .  Next, geometrical information known AutoCAD design can used identify peaks valleys present design. valleys, height profile sampled discrete points order capture baseline shift. discrete baseline points later used fit continuous baseline curve. sampled baseline data points look like :  Use LOESS regression fit curve baseline data points: Regression baseline points looks like :  Note: loess regression doesn’t allow extrapolation, removes leftmost rightmost data points. regression line can subtracted height data order level valleys zero.  function combines steps: Iterate traces correct baseline shift: function can used plot baseline-corrected profiles every wafer:  can seen overview plot, baseline correction method seems work profiles.","code":"profile %>%    filter(position < 1000) %>% # zoom at left-most peak   plot_heightprofile() # lagged differences parameters lag <- 10 dif <- 1 offset <- dif * lag  # calculate derivative derivative <- tibble(   \"d_height\" = diff(profile$height, lag = lag, differences = dif) / diff(profile$position, lag = lag, differences = dif),   # adjust dimension of x axis (lagging difference removes the first l elements):   \"position\" = profile$position[(offset+1):length(profile$position)] )  derivative %>%    filter(position < 1000) %>% # zoom to first structure   ggplot(aes(x = position, y = d_height)) +   geom_line() +    labs(title = \"Derivative of height profile\",        subtitle = paste(\"Lag =\", lag, \", difference order =\", dif),        x = \"Lateral position [um]\",        y = \"Lagged difference magnitude\") +    theme_pretty() get_index_first_peak <- function(values, minSlope) {   # find the first maximum   i <- 1   while (TRUE) {     if (values[i] > minSlope) {       return(i)     }     i <- i+1   } } get_index_first_peak(derivative$d_height, 500) #> [1] 816 rescale_profile <- function(profile, lag, minSlope) {   # calculate derivative of height w.r.t. position   dHeight <- diff(profile[[\"height\"]], lag = lag) / diff(profile[[\"position\"]], lag = lag)   # get index of first peak   first <- get_index_first_peak(dHeight, minSlope)   # get index of last peak   last <- get_index_first_peak(rev(dHeight)* (-1), minSlope)      # convert indices into corresponding position value   posFirst <- profile[[\"position\"]][first + lag]   posLast <- rev(profile[[\"position\"]])[last]      # rescale everything: distance between first and last position should be exactly 45mm   # discard data outside of the interval   profile[(first + lag):(nrow(profile)-last), ] %>%      mutate(position = seq(0, 40500, length.out = n())) %>%      return() } profileRescaled <- profile %>%    rescale_profile(lag = 10, minSlope = 500)  plot_heightprofile(profileRescaled) get_baseline_points <- function(profile) {   # sample points to capture the baseline   samplePoints <- seq(750, 40500, by = 1000)   # exclude center region (has no gap)   samplePoints <- samplePoints[samplePoints < 19000 | samplePoints > 21500]   xIndices <- sapply(samplePoints, function(x,y) which.min(abs(x-y)), profile[[\"position\"]])      # return baseline points   tibble(\"position\" = profile[[\"position\"]][xIndices],          \"height\" = profile[[\"height\"]][xIndices]) %>%      return() } baselinePoints <- profileRescaled %>%    get_baseline_points()  baselinePoints #> # A tibble: 38 × 2 #>    position  height #>       <dbl>   <dbl> #>  1     750.  126.   #>  2    1750.  206.   #>  3    2750.  246.   #>  4    3750.  236.   #>  5    4750.  174.   #>  6    5750.   92.9  #>  7    6750.   -2.16 #>  8    7750. -151.   #>  9    8750. -310.   #> 10    9750. -436.   #> # … with 28 more rows  profileRescaled %>%    plot_heightprofile() +   geom_point(data = baselinePoints, shape = 23, color = \"firebrick1\") baseline_regression <- function(profile, baselinePoints, loessSpan) {   # LOESS regression to fit a function to the baseline data points   loessModel <- loess(height ~ position, data = baselinePoints, span = loessSpan)      # extrapolate   profile %>%      mutate(\"baseline\" = predict(loessModel, position)) %>%      return() } profileRescaled %>%    baseline_regression(baselinePoints, loessSpan = 0.2) %>%    plot_heightprofile() +   geom_line(aes(y = baseline), color = \"firebrick2\") #> Warning: Removed 3004 row(s) containing missing values (geom_path). subtract_baseline <- function(profile) {   profile %>%      mutate(height = height - baseline) %>%      filter(!is.na(height)) %>%      select(!baseline) %>%      return() }  profileRescaled %>%    baseline_regression(baselinePoints, loessSpan = 0.2) %>%    subtract_baseline() %>%    plot_heightprofile() baseline_correction <- function(profile) {   # lag and minSlope are hardcoded in here!   rescaled <- profile %>%      rescale_profile(10, 500)      baselinePoints <- rescaled %>%      get_baseline_points()      rescaled %>%      baseline_regression(baselinePoints, 0.2) %>%      subtract_baseline() %>%      return() } resultsCorrected <- tibble() for (traceId in unique(results$id)) {   corrected <- results %>%      filter(id == traceId) %>%      baseline_correction()   resultsCorrected <- bind_rows(resultsCorrected, corrected) } p <- plot_heightprofile_bywafer(resultsCorrected) print(p)"},{"path":"/articles/spincurves.html","id":"post-processing","dir":"Articles","previous_headings":"","what":"post-processing","title":"SU-8 3035 Spincurve Analysis","text":"next step analysis summarize duplicate measurements exist every structure, interpolate height profile across gaps, order obtain comprehensive plot describes spin coating thickness function radial distance wafer center, well RPM spin time. Function removes baseline segments data using known locations valleys structure, interpolating values surrounding data: resulting height profile contain gaps anymore:  traces show single plot:  wafer, four traces measured, pairs two identical : trace south-north measures structure north-south, true traces east-west west-east. graph, similarity obvious, measurement directions reversed (west-east goes left--right east-west way around). Therefore, two four traces reversed, measurement directions top--bottom left--right. Furthermore, data centered around zero, origin located wafer center. Now lot similarity going height profiles. four traces, horizontal vertical direction, respectively, overlapping large degree.  single wafer:  duplicate measurements horizontal vertical structure averaged.  Finally, since spin coating process radially symmetrical less (ideally), want describe height profile function radial distance wafer center. end, data negative position coordinate flipped positive range. { width=50% }  Plot RPM spintime:","code":"# Geometrically, a valley is 500 um wide. Set to a larger value than that to filter out overshoots in the signal at the edges interpolate_valleys <- function(profile, width = 650) {      ## 1. remove gap data   # the baseline centers are supposed to be located right in the middle of the valleys   baselineCenters <- seq(-250, 42000, by = 1000)   # exclude middle region   # baselineCenters <- baselineCenters[baselineCenters < 19000 | baselineCenters > 21500]   baselinePositions <- sapply(baselineCenters, function(x) seq(x-0.5*width, x + 0.5*width)) %>%      as.numeric()      positionsRounded <- round(profile[[\"position\"]])   idx <- !positionsRounded %in% baselinePositions      positions <- profile$position[idx]   height <- profile$height[idx]      ## 2. interpolate between gaps   a <- approx(positions, height, profile$position)      profile %>%      mutate(height = a$y) %>%      filter(!is.na(height)) %>%      return() } resultsCorrected %>%    filter(id == \"00_job9945_eastwest.csv\") %>%    interpolate_valleys() %>%    plot_heightprofile() +    ylim(c(0, 50000)) resultsInterpolated <- tibble() for (traceId in unique(resultsCorrected$id)) {   r <- resultsCorrected %>%      filter(id == traceId) %>%      interpolate_valleys()   resultsInterpolated <- bind_rows(resultsInterpolated, r) } ggplot(resultsInterpolated, aes(x = position, y = height, color = direction)) +    geom_line() +    geom_hline(yintercept = 0) +    facet_wrap(~ wafer) +    theme_pretty() +    labs(x = \"Lateral position [um]\",        y = \"Height [nm]\",        color = \"Trace\") mirror_and_center <- function(resultsInterpolated) {   resultsInterpolated %>%      group_by(wafer, direction) %>%      arrange(position, .by_group = TRUE) %>%      mutate(height = case_when(direction %in% c(\"southnorth\", \"eastwest\") ~ rev(height),                                         TRUE ~ height)) %>%      # center around zero     mutate(position = position - 0.5 * max(position)) %>%      ungroup() %>%      return() } heights <- resultsInterpolated %>%    mirror_and_center()  ggplot(heights, aes(x = position, y = height, color = direction)) +    geom_line() +    geom_hline(yintercept = 0) +    facet_wrap(~ wafer) +    theme_pretty() +    labs(x = \"Lateral position [um]\",        y = \"Height [nm]\",        color = \"Trace\") heights %>%    filter(wafer == \"job9946\") %>%    ggplot(aes(x = position, y = height, color = direction)) +    geom_line() +    geom_hline(yintercept = 0) +    theme_pretty() +    labs(x = \"Position from wafer center [um]\",        y = \"Height [nm]\",        color = \"Trace direction\") average_duplicate_traces <- function(heights) {   heights %>%      mutate(position = round(position)) %>%      group_by(rpm, wafer, spintime, orientation, position) %>%      summarise(height = round(mean(height)),               height_sd = sd(height),               .groups = \"drop\") %>%      return() } heights <- heights %>%    average_duplicate_traces()  heights %>%    ggplot(aes(x = position, y = height, color = orientation)) +    geom_line() +    geom_hline(yintercept = 0) +    theme_pretty() +    labs(x = \"Position from wafer center [um]\",        y = \"Height [nm]\",        color = \"Trace direction\") +    facet_wrap(~ wafer) make_radial <- function(heights) {   heights %>%      mutate(quadrant = case_when(orientation == \"vertical\" & position < 0 ~ \"south\",                                 orientation == \"vertical\" & position >= 0 ~ \"north\",                                 orientation == \"horizontal\" & position < 0 ~ \"west\",                                 orientation == \"horizontal\" & position >= 0 ~ \"east\",                                 TRUE ~ \"ERROR\")) %>%      # flip values with negative position coordinate into positive range     mutate(position = case_when(position < 0 ~ -position,                                 TRUE ~ position)) %>%      ungroup() %>%      return() }  heightsRadial <- heights %>%    make_radial() ggplot(heightsRadial, aes(x = position, y = height, color = quadrant)) +    geom_line() +    geom_hline(yintercept = 0) +    facet_wrap(~ wafer) +    theme_pretty() +    labs(x = \"Distance from wafer center [um]\",        y = \"Height [nm]\",        color = \"Quadrant\") for (r in unique(heightsRadial$rpm)) {   p <- heightsRadial %>%      filter(rpm == r) %>%      ggplot(aes(x = position*1e-3, y = height*1e-3, color = wafer)) +      geom_vline(xintercept = 25.4, linetype = \"dashed\") +     geom_line(aes(group = interaction(wafer, quadrant), linetype = factor(spintime)), size = 0.5, alpha = 0.7) +      labs(x = \"Distance from wafer center [mm]\",          y = \"Coating thickness [um]\",          linetype = \"Spintime [s]\",          color = \"Wafer id\",          title = paste(r, \"RPM\")) +      scale_color_viridis_d() +      theme_pretty() +      ylim(c(0, 60))   print(p) }"},{"path":"/articles/spincurves.html","id":"conclusions","dir":"Articles","previous_headings":"","what":"conclusions","title":"SU-8 3035 Spincurve Analysis","text":"spin coating results circular inner region uniform thickness outer rim thicker coating spinning longer time (60 instead 30 s) seems expand inner region higher variation thickness across wafers lower RPM (3000, 4000) place chip designs radially symmetrical wafer increase uniformness","code":""},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Fynn Withake. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Withake F (2022). picoinjector: Collection analysis scripts. R package version 0.0.0.9000.","code":"@Manual{,   title = {picoinjector: Collection of analysis scripts},   author = {Fynn Withake},   year = {2022},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"picoinjector","dir":"","previous_headings":"","what":"Collection of analysis scripts","title":"Collection of analysis scripts","text":"goal package implement analysis scripts document calculations estimations used development microfluidic picoinjector.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Collection of analysis scripts","text":"can install development version picoinjector GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"fynnwi/picoinjector\")"},{"path":"/index.html","id":"content","dir":"","previous_headings":"","what":"Content","title":"Collection of analysis scripts","text":"Calculations estimate hydraulic resistances PTFE Tygon tubing resulting flow rates: vignette(\"hydraulic_resistance\") Estimations quantify number droplets contained x cm tubing: vignette(\"droplet_volumes\") Spin curve analysis SU-8 3035 custom dilution: vignette(\"spincurves\")","code":""},{"path":"/index.html","id":"to-do","dir":"","previous_headings":"","what":"To do","title":"Collection of analysis scripts","text":"implement colors electric field voltages Vpp, Vrms etc ORCID ID","code":""},{"path":"/reference/logfile_align_pressure.html","id":null,"dir":"Reference","previous_headings":"","what":"Align Pressure to Syringe Log — logfile_align_pressure","title":"Align Pressure to Syringe Log — logfile_align_pressure","text":"Align Pressure Syringe Log","code":""},{"path":"/reference/logfile_align_pressure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align Pressure to Syringe Log — logfile_align_pressure","text":"","code":"logfile_align_pressure(pressureLog, syringeLog, tPressure, tSyringe)"},{"path":"/reference/logfile_align_pressure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align Pressure to Syringe Log — logfile_align_pressure","text":"pressureLog TODO syringeLog TODO tPressure seconds. tSyringe seconds.","code":""},{"path":"/reference/logfile_align_pressure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align Pressure to Syringe Log — logfile_align_pressure","text":"TODO","code":""},{"path":"/reference/logfile_plot_pressure.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Pressure Log — logfile_plot_pressure","title":"Plot Pressure Log — logfile_plot_pressure","text":"Plot Pressure Log","code":""},{"path":"/reference/logfile_plot_pressure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Pressure Log — logfile_plot_pressure","text":"","code":"logfile_plot_pressure(pressureLog)"},{"path":"/reference/logfile_plot_pressure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Pressure Log — logfile_plot_pressure","text":"pressureLog Pressure log.","code":""},{"path":"/reference/logfile_plot_pressure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Pressure Log — logfile_plot_pressure","text":"ggplot object.","code":""},{"path":"/reference/logfile_plot_syringepump.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Syringe Pump Log — logfile_plot_syringepump","title":"Plot Syringe Pump Log — logfile_plot_syringepump","text":"Plot Syringe Pump Log","code":""},{"path":"/reference/logfile_plot_syringepump.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Syringe Pump Log — logfile_plot_syringepump","text":"","code":"logfile_plot_syringepump(syringepumpLog)"},{"path":"/reference/logfile_plot_syringepump.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Syringe Pump Log — logfile_plot_syringepump","text":"syringepumpLog Syringe pump log.","code":""},{"path":"/reference/logfile_plot_syringepump.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Syringe Pump Log — logfile_plot_syringepump","text":"ggplot object.","code":""},{"path":"/reference/logfile_read_pressure.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Elveflow OB1 Pressure Controller Log File — logfile_read_pressure","title":"Read Elveflow OB1 Pressure Controller Log File — logfile_read_pressure","text":"Read Elveflow OB1 Pressure Controller Log File","code":""},{"path":"/reference/logfile_read_pressure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Elveflow OB1 Pressure Controller Log File — logfile_read_pressure","text":"","code":"logfile_read_pressure(filename)"},{"path":"/reference/logfile_read_pressure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Elveflow OB1 Pressure Controller Log File — logfile_read_pressure","text":"filename Path log file.","code":""},{"path":"/reference/logfile_read_pressure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Elveflow OB1 Pressure Controller Log File — logfile_read_pressure","text":"Channel pressures long format.","code":""},{"path":"/reference/logfile_read_syringepump.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Cetoni Syringe Pump Log File — logfile_read_syringepump","title":"Read Cetoni Syringe Pump Log File — logfile_read_syringepump","text":"Read Cetoni Syringe Pump Log File","code":""},{"path":"/reference/logfile_read_syringepump.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Cetoni Syringe Pump Log File — logfile_read_syringepump","text":"","code":"logfile_read_syringepump(filename)"},{"path":"/reference/logfile_read_syringepump.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Cetoni Syringe Pump Log File — logfile_read_syringepump","text":"filename Path log file.","code":""},{"path":"/reference/logfile_read_syringepump.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Cetoni Syringe Pump Log File — logfile_read_syringepump","text":"Syringe flowrates long format.","code":""},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/plot_heightprofile.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Height Profile — plot_heightprofile","title":"Plot Height Profile — plot_heightprofile","text":"Plot Height Profile","code":""},{"path":"/reference/plot_heightprofile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Height Profile — plot_heightprofile","text":"","code":"plot_heightprofile(heights)"},{"path":"/reference/plot_heightprofile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Height Profile — plot_heightprofile","text":"heights Dataframe containing columnes 'position' 'height'","code":""},{"path":"/reference/plot_heightprofile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Height Profile — plot_heightprofile","text":"ggplot object","code":""},{"path":"/reference/plot_heightprofile_bywafer.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Height Profiles By Wafer — plot_heightprofile_bywafer","title":"Plot Height Profiles By Wafer — plot_heightprofile_bywafer","text":"Plot Height Profiles Wafer","code":""},{"path":"/reference/plot_heightprofile_bywafer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Height Profiles By Wafer — plot_heightprofile_bywafer","text":"","code":"plot_heightprofile_bywafer(heights)"},{"path":"/reference/plot_heightprofile_bywafer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Height Profiles By Wafer — plot_heightprofile_bywafer","text":"heights TODO","code":""},{"path":"/reference/plot_heightprofile_bywafer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Height Profiles By Wafer — plot_heightprofile_bywafer","text":"ggplot object.","code":""},{"path":"/reference/theme_fynn.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom ggplot2 Theme — theme_fynn","title":"Custom ggplot2 Theme — theme_fynn","text":"Custom ggplot2 Theme","code":""},{"path":"/reference/theme_fynn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom ggplot2 Theme — theme_fynn","text":"","code":"theme_fynn()"},{"path":"/reference/theme_pretty.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom ggplot2 Theme — theme_pretty","title":"Custom ggplot2 Theme — theme_pretty","text":"Custom ggplot2 Theme","code":""},{"path":"/reference/theme_pretty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom ggplot2 Theme — theme_pretty","text":"","code":"theme_pretty()"}]
